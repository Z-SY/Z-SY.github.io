<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://Z-SY.github.io</id>
    <title>心無旁騖 斷而敢行</title>
    <subtitle>君子如竹，當品性高潔；君心似水，當靜遠流深</subtitle>
    <icon>https://z-sy.github.io/images/favicon.ico</icon>
    <link href="https://Z-SY.github.io" />
    <author>
      <name>ysun</name>
    </author>
    <updated>2021-01-02T00:40:30.000Z</updated>
    <entry>
        <id>https://z-sy.github.io/2021/01/02/algorithm-2021-01-02-%E4%B8%80%E6%AC%A1%E5%8F%8B%E5%A5%BD%E7%9A%84%E5%AF%B9%E8%AF%9D/</id>
        <title>一次友好的对话</title>
        <link rel="alternate" href="https://z-sy.github.io/2021/01/02/algorithm-2021-01-02-%E4%B8%80%E6%AC%A1%E5%8F%8B%E5%A5%BD%E7%9A%84%E5%AF%B9%E8%AF%9D/"/>
        <content type="html">&lt;h1 id=&#34;0x00-开篇&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#0x00-开篇&#34;&gt;#&lt;/a&gt; 0x00 开篇&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;kbd&#34;&gt;勉励语 - 非淡泊无以明志，非宁静无以致远&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;0x01-问题-一次友好的对话&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#0x01-问题-一次友好的对话&#34;&gt;#&lt;/a&gt; 0x01 问题 - 一次友好的对话&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;输入 - 一个最多包含 n 个正整数的文件，每个数都小于 n，其中 n=10^7。如果在输入文件中有任何整数重复出现就是致命错误。没有其他数据与该整数相关联。&lt;/li&gt;
&lt;li&gt;输出 - 按升序排列的输入整数的列表&lt;/li&gt;
&lt;li&gt;约束 - 最多大约有 1MB 的内存空间可用，有充足的磁盘存储空间可用。运行时间最多几分钟，运行时间 10S 就不需要进一步优化了。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;0x02-问题分析&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#0x02-问题分析&#34;&gt;#&lt;/a&gt; 0x02 问题分析&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;常见方式一般的以基于磁盘的&lt;span class=&#34;kbd&#34;&gt;归并排序&lt;/span&gt;为起点，但需对其进行调整，由于是对整数进行排序，可将原来两百行的程序减少为十几行，同时，程序将运行的更快，但是完成程序可能仍然需要几天时间。&lt;/li&gt;
&lt;li&gt;另一种解决方案利用该问题的特殊性。如果每个号码都使用 7 字节来存储，那么在可用的 1MB 存储空间大约可存 143000 个号码。如果每个号码都使用 32 位整数来表示的话，在 1MB 的存储空间里就可以存储 250000 个号码。因此，可重复遍历输入文件 40 趟来完成排序。第一趟 - 0 至 249999；第二趟 - 250000 至 499999 依此类推。对于内存中的排序来讲&lt;span class=&#34;kbd&#34;&gt;快速排序&lt;/span&gt;相当高效，且该程序拥有所希望的特性 - 不必考虑使用中间磁盘文件，但为此付出的代价是读取输入文件 40 次。&lt;/li&gt;
&lt;li&gt;综上两方优点 - 我们想要的读输入文件一次，且不使用中间文件。最终，问题归结为能否能够用大约 800 万个可用位来表示最多 1000 万个互异的整数。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;0x03-应用算法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#0x03-应用算法&#34;&gt;#&lt;/a&gt; 0x03 应用算法&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;位图算法。BitMap 算法的核心思想是用 bit 数组来记录 0-1 两种状态，然后再将具体数据映射到这个比特数组的具体位置，这个比特位设置成 0 表示数据不存在，设置成 1 表示数据存在。&lt;/li&gt;
&lt;li&gt;BitMap 算在在大量数据查询、去重等应用场景中使用的比较多，这个算法具有比较高的空间利用率。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;/* 伪代码 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;/* phase 1: initialize set to empty */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;n&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  bit&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;/* phase 2: insert present elements into the set */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; each i in the input file&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  bit&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;/* phase 3: write sorted output */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;n&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; bit&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    write i on the output file&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
        <category term="算法" scheme="https://z-sy.github.io/categories/algorithm/" />
        <category term="编程珠玑" scheme="https://z-sy.github.io/tags/%E7%BC%96%E7%A8%8B%E7%8F%A0%E7%8E%91/" />
        <updated>2021-01-02T00:40:30.000Z</updated>
    </entry>
    <entry>
        <id>https://z-sy.github.io/2020/12/30/binary-2020-12-30-0day%E5%AE%89%E5%85%A8%E6%B8%A9%E4%B9%A0-03/</id>
        <title>0day安全温习-03</title>
        <link rel="alternate" href="https://z-sy.github.io/2020/12/30/binary-2020-12-30-0day%E5%AE%89%E5%85%A8%E6%B8%A9%E4%B9%A0-03/"/>
        <content type="html">&lt;h1 id=&#34;0x00-开篇&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#0x00-开篇&#34;&gt;#&lt;/a&gt; 0x00 开篇&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;kbd&#34;&gt;勉励语 - 立志言为本，修身行乃先&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;0x01-逆向常用工具&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#0x01-逆向常用工具&#34;&gt;#&lt;/a&gt; 0x01 逆向常用工具&lt;/h1&gt;
&lt;div class=&#34;note info&#34;&gt;
&lt;p&gt;包括但不限于&lt;/p&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;动态分析工具
&lt;ul&gt;
&lt;li&gt;OllyDbg&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;静态分析工具
&lt;ul&gt;
&lt;li&gt;IDA Pro&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;二进制编辑器
&lt;ul&gt;
&lt;li&gt;UltraEdit&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;0x02-栈溢出原理与实践&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#0x02-栈溢出原理与实践&#34;&gt;#&lt;/a&gt; 0x02 栈溢出原理与实践&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;何为&lt;span class=&#34;kbd&#34;&gt;栈溢出&lt;/span&gt;
&lt;ul&gt;
&lt;li&gt;简单来说，缓冲区溢出就是在大缓冲区中的数据向小缓冲区复制的过程中，由于没有注意小缓冲区的边界，“撑爆” 了较小的缓冲区，从而冲掉了和小缓冲区相邻内存区域的其它数据而引起的内存问题。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;0x03-两个寄存器esp和ebp&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#0x03-两个寄存器esp和ebp&#34;&gt;#&lt;/a&gt; 0x03 两个寄存器 ESP 和 EBP&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;* ESP-栈指针寄存器(extended stack po inter)，其内存放着一个指针，该指针永远指向系统栈最上面一个栈帧的栈顶。
* EBP-基址指针寄存器(extended base pointer)，其内存放着一个指针，该指针永远指向系统栈最上面一个栈帧的底部。
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;0x04-函数调用过程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#0x04-函数调用过程&#34;&gt;#&lt;/a&gt; 0x04 函数调用过程&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;* 在形成函数栈帧一般要经历如下几个步骤：push操作进行参数入栈---&amp;gt;call调用进行下一条返回地址的入栈操作并跳入调用函数的代码区---&amp;gt;进入函数代码区后，一个push ebp记录当前栈帧，一个mov ebp，esp设置新栈帧的底部，一个sud esp，xxx抬高新栈帧的顶部，留出局部变量的空间。至此一个新栈帧形成。同理，函数返回步骤如下：保存返回值，通常放在EAX寄存器中---&amp;gt;弹出当前栈帧，恢复上一个栈帧。具体操作-首先根据堆栈平衡，给ESP加上栈帧的大小，降低栈顶，回收当前栈帧空间，其次将当前栈帧底部保存的前栈帧EBP数值弹入EBP寄存器，恢复出上一个栈帧的栈帧底部，将保存的call调用的下一条指令地址弹给EIP寄存器。完成了一个新栈帧的生命周期，创建和释放。
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;note info&#34;&gt;
&lt;p&gt;进行缓冲出溢出实验注意事项 - 函数的调用约定和相关指令。一般，参数入栈顺序从右至左 - C、Syscall、Stdcall，其中 C 的恢复栈平衡位置在母函数，剩下的两个都在子函数。参数入栈顺序从左至右 - Basic、Fortran、Pascal，其恢复栈平衡的位置都在子函数中进行。在进行淹没溢出操作时候要注意！&lt;/p&gt;
&lt;/div&gt;
</content>
        <category term="二进制" scheme="https://z-sy.github.io/categories/binary/" />
        <category term="0day安全" scheme="https://z-sy.github.io/tags/0day%E5%AE%89%E5%85%A8/" />
        <updated>2020-12-30T15:32:35.000Z</updated>
    </entry>
    <entry>
        <id>https://z-sy.github.io/2020/12/28/binary-2020-12-28-0day%E5%AE%89%E5%85%A8%E6%B8%A9%E4%B9%A0-02/</id>
        <title>0day安全温习-02</title>
        <link rel="alternate" href="https://z-sy.github.io/2020/12/28/binary-2020-12-28-0day%E5%AE%89%E5%85%A8%E6%B8%A9%E4%B9%A0-02/"/>
        <content type="html">&lt;h1 id=&#34;0x00-开篇&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#0x00-开篇&#34;&gt;#&lt;/a&gt; 0x00 开篇&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;kbd&#34;&gt;勉励语 - 风之积也不厚，则其负大翼也无力&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;0x01-基础&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#0x01-基础&#34;&gt;#&lt;/a&gt; 0x01 基础&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;PE 文件格式
&lt;ul&gt;
&lt;li&gt;PE 全称 - Portable Executable，是 Win32 平台下可执行文件遵守的数据格式。常见的可执行文件（如 “&lt;em&gt;.exe” 文件和 “&lt;/em&gt;.dll” 文件）都是典型的 PE 文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;PE 文件格式的数据节（section）
&lt;ul&gt;
&lt;li&gt;.text - 由编译器产生，存放着二进制的机器代码，也是我们反汇编和调试的对象&lt;/li&gt;
&lt;li&gt;.data - 初始化的数据块，如宏定义、全局变量、静态变量等&lt;/li&gt;
&lt;li&gt;.idata - 可执行文件所使用的动态链接库等外来函数与文件的信息&lt;/li&gt;
&lt;li&gt;.rsrc - 存放程序的资源，如图标、菜单等&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;note info&#34;&gt;
&lt;p&gt;正常编译出的标准 PE 文件，其节信息往往是大致相同的。但这些 section 的名字只是为了方便人的记忆与使用，使用 Microsoft Visual C++ 中的编译指示符 #pragma dat a_seg () 可以把代码中的任意部分编译到 PE 的任意节中，节名也可以自己定义。如果可执行文件经过了 “加壳” 处理，PE 的节信息就会变得非常 “古怪”。在 Crack 和反病毒分析中需要经常处理这类古怪的 PE 文件&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;PE 与虚拟内存之间的映射
&lt;ul&gt;
&lt;li&gt;何为&lt;span class=&#34;kbd&#34;&gt;文件偏移地址&lt;/span&gt;
&lt;ul&gt;
&lt;li&gt;数据在 PE 文件中的地址叫文件偏移地址，个人认为叫做文件地址更加准确。这是文件在磁盘上存放时相对于文件开头的偏移。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;何为&lt;span class=&#34;kbd&#34;&gt;装载基址 - Image Base&lt;/span&gt;
&lt;ul&gt;
&lt;li&gt;PE 装入内存时的基地址。默认情况下，EXE 文件在内存中的基地址是 0x00400000，DLL 文件是 0x10000000。这些位置可以通过修改编译选项更改。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;何为&lt;span class=&#34;kbd&#34;&gt;虚拟内存地址 - Virtual Address，VA）&lt;/span&gt;
&lt;ul&gt;
&lt;li&gt;PE 文件中的指令被装入内存后的地址。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;何为&lt;span class=&#34;kbd&#34;&gt;相对虚拟地址（Relative Virtual Address，RVA）&lt;/span&gt;
&lt;ul&gt;
&lt;li&gt;相对虚拟地址是内存地址相对于映射基址的偏移量。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;note info&#34;&gt;
&lt;p&gt;VA= Image Base+ RVA&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;节偏移
&lt;ul&gt;
&lt;li&gt;产生原因 - 文件数据的存放单位与内存数据存放单位不同，文件 - 0x200；内存 - 0x1000h，对于两者不足单位的数据都会用 0x00 进行填充补全&lt;/li&gt;
&lt;li&gt;换算公式
&lt;ul&gt;
&lt;li&gt;文件偏移地址 = 虚拟内存地址（VA）−装载基址（Image Base）−节偏移&lt;br /&gt;
 = RVA - 节偏移&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;note info&#34;&gt;
&lt;p&gt;在进行转换时，还有判断要转换的地址位于那个节内，然后减去相应的节偏移&lt;/p&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;工具推荐 -&lt;span class=&#34;kbd&#34;&gt;LordPE&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
        <category term="二进制" scheme="https://z-sy.github.io/categories/binary/" />
        <category term="0day安全" scheme="https://z-sy.github.io/tags/0day%E5%AE%89%E5%85%A8/" />
        <updated>2020-12-28T15:43:28.000Z</updated>
    </entry>
    <entry>
        <id>https://z-sy.github.io/2020/12/27/binary-2020-12-27-0day%E5%AE%89%E5%85%A8%E6%B8%A9%E4%B9%A0-01/</id>
        <title>0day安全温习-01</title>
        <link rel="alternate" href="https://z-sy.github.io/2020/12/27/binary-2020-12-27-0day%E5%AE%89%E5%85%A8%E6%B8%A9%E4%B9%A0-01/"/>
        <content type="html">&lt;h1 id=&#34;0x00-开篇&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#0x00-开篇&#34;&gt;#&lt;/a&gt; 0x00 开篇&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;kbd&#34;&gt;勉励语 - 精勤求学，敦笃励志&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;0x01-基础知识&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#0x01-基础知识&#34;&gt;#&lt;/a&gt; 0x01 基础知识&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;漏洞挖掘
&lt;ul&gt;
&lt;li&gt;安全性漏洞往往不会对软件本身功能造成很大影响，因此很难被 QA 工程师的功能性测试发现，对于进行 “正常操作” 的普通用户来说，更难体会到软件中的这类逻辑瑕疵。&lt;/li&gt;
&lt;li&gt;从技术角度讲，所谓的漏洞挖掘更像是高级的 QA，一群精通二进制、汇编语言和操作系统底层知识的大手子没日没夜、精力旺盛的测试产品，寻找产品中的漏洞，敏锐的捕捉到程序中那些微笑细微的错误。大型的软件企业也会雇用一些安全专家来测试自己产品中的漏洞，这种测试工作可称 - Penetration test（攻击测试）；这些测试团队则被称做 Tiger team 或者 Ethic hacker。&lt;/li&gt;
&lt;li&gt;工程界 - 普遍采用的方式是 Fuzz，实际是一种灰盒测试；学术界 - 侧重教导，一般采用静态分析。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;漏洞分析
&lt;ul&gt;
&lt;li&gt;分析漏洞时，如果能搜索到 POC 代码，就能重现漏洞现场；如果不能获得 POC，比较通用的方法是采用补丁比较器，比较 Patch 前后的可执行程序修改了哪些地方，然后再重点分析。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;漏洞利用
&lt;ul&gt;
&lt;li&gt;针对发现的漏洞，可部署相应的攻击代码测试代码，进行提权等操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;0x02-常用短语&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#0x02-常用短语&#34;&gt;#&lt;/a&gt; 0x02 常用短语&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;何为&lt;span class=&#34;kbd&#34;&gt; 0DAY&lt;/span&gt; - 零日漏洞
&lt;ul&gt;
&lt;li&gt;未被公布，未被修复的漏洞。依次类推补丁刚刚发布的一段时间内，并非所有用户都能及时修复，故这种新公布的漏洞也有一定利用价值。有时把攻击这种刚刚被 patch 过的漏洞称为 1 day 攻击。（patch 发布后 1 天，叫做 1 day，5 天叫做 5 day，未发 patch 统称 0 day）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;何为&lt;span class=&#34;kbd&#34;&gt; CVE&lt;/span&gt;-&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2N2ZS5taXRyZS5vcmcv&#34;&gt; http://cve.mitre.org/&lt;/span&gt;
&lt;ul&gt;
&lt;li&gt;英文全称是 “Common Vulnerabilities &amp;amp; Exposures” 通用漏洞披露。CVE 就好像是一个字典表，为广泛认同的信息安全漏洞或者已经暴露出来的弱点给出一个公共的名称。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;何为&lt;span class=&#34;kbd&#34;&gt; POC&lt;/span&gt;
&lt;ul&gt;
&lt;li&gt;全称 &#39;Proof of Concept&#39;，中文概念验证，常指一段漏洞证明的代码。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;何为&lt;span class=&#34;kbd&#34;&gt; EXP&lt;/span&gt;
&lt;ul&gt;
&lt;li&gt;全称 &#39;Exploit&#39;，中文 &#39; 利用 &#39;，指利用系统漏洞进行攻击的动作。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;何为&lt;span class=&#34;kbd&#34;&gt; PayLoad&lt;/span&gt;
&lt;ul&gt;
&lt;li&gt;中文 &#39; 有效载荷 &#39;，指成功 exploit 之后真正在目标系统执行的代码或指令。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;何为&lt;span class=&#34;kbd&#34;&gt; ShellCode&lt;/span&gt;
&lt;ul&gt;
&lt;li&gt;简单翻译 &#39;Shell 代码 &#39;，是 Payload 的一种，由于其建立正向 / 反向 shell 而得名。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
        <category term="二进制" scheme="https://z-sy.github.io/categories/binary/" />
        <category term="0day安全" scheme="https://z-sy.github.io/tags/0day%E5%AE%89%E5%85%A8/" />
        <updated>2020-12-27T15:17:07.000Z</updated>
    </entry>
    <entry>
        <id>https://z-sy.github.io/2020/12/26/front-end-2020-12-26-front-introduce/</id>
        <title>模块介绍</title>
        <link rel="alternate" href="https://z-sy.github.io/2020/12/26/front-end-2020-12-26-front-introduce/"/>
        <content type="html">&lt;h1 id=&#34;0x00-开篇&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#0x00-开篇&#34;&gt;#&lt;/a&gt; 0x00 开篇&lt;/h1&gt;
&lt;p&gt;本模块主要梳理总结学习的前端相关知识&lt;/p&gt;
</content>
        <category term="前端" scheme="https://z-sy.github.io/categories/front-end/" />
        <updated>2020-12-26T10:18:22.000Z</updated>
    </entry>
    <entry>
        <id>https://z-sy.github.io/2020/12/26/binary-2020-12-26-binary-introduce/</id>
        <title>模块介绍</title>
        <link rel="alternate" href="https://z-sy.github.io/2020/12/26/binary-2020-12-26-binary-introduce/"/>
        <content type="html">&lt;h1 id=&#34;0x00-开篇&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#0x00-开篇&#34;&gt;#&lt;/a&gt; 0x00 开篇&lt;/h1&gt;
&lt;p&gt;本模块主要梳理总结二进制知识体系，较为繁杂&lt;/p&gt;
</content>
        <category term="二进制" scheme="https://z-sy.github.io/categories/binary/" />
        <updated>2020-12-26T10:18:21.000Z</updated>
    </entry>
    <entry>
        <id>https://z-sy.github.io/2020/12/26/back-end-2020-12-26-back-introduce/</id>
        <title>模块介绍</title>
        <link rel="alternate" href="https://z-sy.github.io/2020/12/26/back-end-2020-12-26-back-introduce/"/>
        <content type="html">&lt;h1 id=&#34;0x00-开篇&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#0x00-开篇&#34;&gt;#&lt;/a&gt; 0x00 开篇&lt;/h1&gt;
&lt;p&gt;本模块主要梳理总结学习的后端相关知识&lt;/p&gt;
</content>
        <category term="后端" scheme="https://z-sy.github.io/categories/back-end/" />
        <updated>2020-12-26T10:18:20.000Z</updated>
    </entry>
    <entry>
        <id>https://z-sy.github.io/2020/12/26/algorithm-2020-12-26-algorithm-introduce/</id>
        <title>模块介绍</title>
        <link rel="alternate" href="https://z-sy.github.io/2020/12/26/algorithm-2020-12-26-algorithm-introduce/"/>
        <content type="html">&lt;h1 id=&#34;0x00-开篇&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#0x00-开篇&#34;&gt;#&lt;/a&gt; 0x00 开篇&lt;/h1&gt;
&lt;p&gt;本模块主要梳理总结算法相关内容&lt;/p&gt;
</content>
        <category term="算法" scheme="https://z-sy.github.io/categories/algorithm/" />
        <updated>2020-12-26T10:18:19.000Z</updated>
    </entry>
    <entry>
        <id>https://z-sy.github.io/2020/12/26/FirstBlog/</id>
        <title>关于本博客</title>
        <link rel="alternate" href="https://z-sy.github.io/2020/12/26/FirstBlog/"/>
        <content type="html">&lt;h1 id=&#34;0x00-致谢&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#0x00-致谢&#34;&gt;#&lt;/a&gt; 0x00 致谢&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;首先，先感谢一下&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2FtZWhpbWU=&#34;&gt; amehime&lt;/span&gt; 大佬的&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWUv&#34;&gt; shoka 主题&lt;/span&gt;吧，无意间了解到 hexo，后来点进了官网主题页面，访问了大佬的界面，一下子就被主题配色和音乐吸引住了，不能自拔❤️❤️❤️, 这满满的二次元调调，用美不胜收形容都不为过。推荐大家也去欣赏一下！&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;0x01-开篇&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#0x01-开篇&#34;&gt;#&lt;/a&gt; 0x01 开篇&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;嗯。。。也不算是第一篇博文吧。但是距离之前写的博文已经很久远了，且这回是第一次接触 hexo 来书写博客，所以一切都从头算好了！哈哈哈哈&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;0x02-关于捡回书写博客习惯的原因&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#0x02-关于捡回书写博客习惯的原因&#34;&gt;#&lt;/a&gt; 0x02 关于捡回书写博客习惯的原因&lt;/h1&gt;
&lt;div class=&#34;note warning&#34;&gt;
&lt;p&gt;警告：前方回忆杀预警💥💥💥&lt;/p&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;大学的时候，时间很多。对于计算机的兴趣非常大，每日除了课堂学的，回寝后自己也会瞎折腾好多东西，本地机子也好，VPS 也罢，都尝试了很多东西，但是说实话，很失败啊，随着时间的流逝，真正留下来的东西很少，无非是自己再听到这些东西的时候，脑子里有了个印象 -“啊，这个东西啊。我搞过；哎，也就那样，维护起来也怪累的”。&lt;/li&gt;
&lt;li&gt;搭过传奇的服务器，脚本里魔改了很多东西，过分到什么程度呢，一刀 999999 在我这都算是垃圾武器打出的暴击，哈哈哈哈哈。身为管理员，更是利用上帝特权各种给自己开后门😎（PS；学生党，没钱推广，而且只是本地起服务瞎折腾试试，所以别说我私服违规啥的🤣）；&lt;/li&gt;
&lt;li&gt;维护过 discuzz 论坛，论坛一般更新一些每月新番动漫，这个是租的 VPS，最便宜的打折搞活动那种🤧，速度是真的垃圾，偶尔高峰时段经常断联，而且访问速度感人。说实话，一个人的精力很有限，刚开始每天都会更新，打一些安全补丁啥的，但是越来越懒（可能也是访问量没啥起色吧，再加上便宜 VPS，也不咋心疼），后面估计是太久没更新，网站都让人脱库了，索性直接删了，服务器只当个跳板（看看外面，保持知识更新）用，用来看看油管，收集下载一些好玩的工具站啥的&lt;/li&gt;
&lt;li&gt;搭过 WordPress，这就是我最开始用的 CMS，那个时候是刚刚毕业工作吧，我一个北方汉子来到了广东这个陌生的城市，周末日常颓废时（这里说一下，陌生城市，人生地不熟，整个人的状态很容易变得很奇怪，我有段时间感觉经常一个人翻着知识站突然开始对着电脑神游发呆，不知道是刚毕业的迷茫还是一个人太久了，经常就开始神游太虚了，哈哈哈哈哈哈）就想，不如把工作生活中好多自己觉得好玩有趣的东西记录一下。这里说一下，Wordpress 确实对新手很友好，几乎全程是傻瓜式建站，基本不用做什么特别操作。倒是我自己，配置 LAMP 环境的时候，全部都从头自己搞了一遍，哇，第一次的时候是真滴酸爽，用了好长时间才跑起了服务，搭的时候就在想为啥没人写个 bash 脚本啥的呢，执行一次就完事得了。后来我才知道有宝塔这种神器（哭唧唧😱）一键配置脚本，当然，从头搞也不是没有好处，毕竟你自己对整个的流程就有了个大体的认识了。后面由于工作经常出差加懒癌晚期，遂又一次不了了之了&lt;/li&gt;
&lt;li&gt;视频解析站，这个没啥东西。接口都是网上搜的，我只是做了个整合，给我这种经济严重紧张的群体提供个方便罢了，后来发现自己搜的好多接口都不太稳定，而且有的接口各种广告，很影响心情，都不如直接度娘搜来的舒服，所以&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;cd&lt;/span&gt; /var/www/html&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;rm&lt;/span&gt; -rf ./Vipparse&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;一气呵成，丝毫不犹豫，哈哈哈哈哈哈哈&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;后来工作一年基本也不怎么折腾这些东西了，基本就是看到哪个东西自己感觉好玩就搞一段时间，玩腻了就直接弃坑转下一个战场。现在对于熟悉什么语言啥的也没啥感觉了，基本就是哪个方便需要哪个就上哪个，语法忘记了就直接看书上网搜一下。当然，C 和 C++ 还是相对来说偏爱的，毕竟毕业的第一份工作是嵌入式的工作，很喜欢接近底层的东西（写到这下意识的摸了下头发，还好，看来我还是很菜不够强，目前不用担心🤣）。仔细想想从大学到工作，破解过外挂，写过 app，写过修改器，破解过水卡，调过 cve 漏洞，搭过钓鱼 wifi 等（写到这，我想说一句，web 方向根本不好学好伐，各种知识体系纷繁复杂，各种框架层出不穷，相比底层感觉知识爆炸多啊😱, 直到现在都感觉也没有感觉哪个东西特别熟悉）&lt;/li&gt;
&lt;li&gt;咳咳。。。cut，每天时间有限，回忆完毕，进入正题：
&lt;ol&gt;
&lt;li&gt;对于技术的热爱。这个还是自己在宿舍思考的时候总结的，自己好多东西撒网太广，各式各样知识点太细太杂了，经常像熊瞎子掰苞米一样，这段时间搞这个熟点了，过了一段时间就又生疏了。这样子刚开始觉得没问题，忘了就再在网络搜再找就好了，温习一次就好了，但这样日积月累，花费的时间代价是巨大的，随着年龄的增长，越来越得不偿失，不如像好多大佬那样，整理自己的知识体系，有句话说得好，好记性不如烂笔头，更何况咱还没有大佬们那些好记性，干脆就记下来以自己的方式走就好了。&lt;/li&gt;
&lt;li&gt;合抱之木，生于毫末；九层之台，起于垒土；千里之行，始于足下。这个社会发展很快，很浮躁，每个人都急于要成绩，但有些事情我认为必须要降速，尤其是打基础阶段，好多东西是需要沉淀的，我们总是看到别人做的东西多么好多么绚丽，却忽视人家背后的积累，这是短视的，再复杂的东西也是靠着基础的语法语句一步步搭起来的，所以，元知识是非常重要的。&lt;/li&gt;
&lt;li&gt;简洁唯美。目前更想要的是将自己学的知识做一个记录整理并和大家分享积累，类似一个公开笔记一样，Github Pages 早有耳闻，但直到有需求才开始细了解，就像一条线一样，Github Pages---&amp;gt;hexo---&amp;gt; 霜月大佬主题 ---&amp;gt; 准备入坑&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;0x03-总结&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#0x03-总结&#34;&gt;#&lt;/a&gt; 0x03 总结&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;总体来说就是这样吧，整理知识点，记录，和大家分享，和大家一起提升。&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL3poLWNuLw==&#34;&gt;hexo&lt;/span&gt; 的东西和霜月大佬的&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWUv&#34;&gt; shoka 主题&lt;/span&gt;还在熟悉中，好多东西一点点探索吧（😏新东西学起来总是有点激动呢😏）&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;0x04-目前站点问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#0x04-目前站点问题&#34;&gt;#&lt;/a&gt; 0x04 目前站点问题&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;评论系统未调&lt;/li&gt;
&lt;li&gt;搜索功能未调（目前刚开始，基本用不到，先放放😌）&lt;/li&gt;
&lt;li&gt;图床使用霜月大佬的链接（请不要喷我，我真的是太爱大佬收集整理的这些照片了，更何况自己找图床又不稳定，不如就用大佬的吧，哪天大佬的要是挂了再考虑自己整理一份吧，哈哈哈哈哈）&lt;/li&gt;
&lt;li&gt;目前整体文字性东西太少，远远不够和各位大佬做友链的级别，今后开始努力书写吧，&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTQlQjklOEMlRTYlOEIlODkvMTAyMjk0MTg/ZnI9YWxhZGRpbg==&#34;&gt;乌拉&lt;/span&gt;～～～～～&lt;/li&gt;
&lt;li&gt;各项配置有待熟悉，摸索中。。。&lt;/li&gt;
&lt;/ol&gt;
</content>
        <updated>2020-12-26T10:18:18.000Z</updated>
    </entry>
</feed>
