{
    "version": "https://jsonfeed.org/version/1",
    "title": "心無旁騖 斷而敢行",
    "subtitle": "君子如竹，當品性高潔；君心似水，當靜遠流深",
    "icon": "https://z-sy.github.io/images/favicon.ico",
    "description": "",
    "home_page_url": "https://Z-SY.github.io",
    "items": [
        {
            "id": "https://z-sy.github.io/2021/01/24/binary-2021-01-24-0day%E5%AE%89%E5%85%A8%E6%B8%A9%E4%B9%A0-06/",
            "url": "https://z-sy.github.io/2021/01/24/binary-2021-01-24-0day%E5%AE%89%E5%85%A8%E6%B8%A9%E4%B9%A0-06/",
            "title": "0day安全温习-06",
            "date_published": "2021-01-24T10:15:34.000Z",
            "content_html": "<h1 id=\"0x00-开篇\"><a class=\"anchor\" href=\"#0x00-开篇\">#</a> 0x00 开篇</h1>\n<ul>\n<li><span class=\"kbd\">勉励语 - 两句三年得，一吟双泪流</span></li>\n</ul>\n<h1 id=\"0x01-shellcode\"><a class=\"anchor\" href=\"#0x01-shellcode\">#</a> 0x01 ShellCode</h1>\n<ul>\n<li>1996 年，Aleph One 在 Underground 发表了著名论文 Smashing the Stack for Fun and Profit，其中详细描述了 Linux 系统中栈的结构和如何利用基于栈的缓冲区溢出。在这篇具有划时代意义的论文中，Aleph One 演示了如何向进程中植入一段用于获得 shell 的代码，并在论文中称这段被植入进程的代码为 “shellcode”。</li>\n<li>后来人们干脆统一用 shellcode 这个专用术语来通称缓冲区溢出攻击中植入进程的代码。这段代码可以是出于恶作剧目的的弹出一个消息框，也可以是出于攻击目的的删改重要文件、窃取数据、上传木马病毒并运行，甚至是出于破坏目的的格式化硬盘等。请注意本章讨论的 shellcode 是这种广义上的植入进程的代码，而不是狭义上的仅仅用来获得 shell 的代码。shellcode 往往需要用汇编语言写，并转换成二进制机器码，其内容和长度经常还会受到很多苛刻限制，故开发和调试的难度很高。</li>\n</ul>\n<h1 id=\"0x02-exploit\"><a class=\"anchor\" href=\"#0x02-exploit\">#</a> 0x02 Exploit</h1>\n<ul>\n<li>植入代码之前需要做大量的调试工作，例如，弄清楚程序有几个输入点，这些输入将最终会当作哪个函数的第几个参数读入到内存的哪一个区域，哪一个输入会造成栈溢出，在复制到栈区的时候对这些数据有没有额外的限制等。调试之后还要计算函数返回地址距离缓冲区的偏移并淹没之，选择指令的地址，最终制作出一个有攻击效果的 “承载” 着 shellcode 的输入字符串。这个代码植入的过程就是漏洞利用，也就是 exploit。</li>\n<li>exploit 一般以一段代码的形式出现，用于生成攻击性的网络数据包或者其他形式的攻击性输入。expliot 的核心是淹没返回地址，劫持进程的控制权，之后跳转去执行 shellcode。与 shellcode 具有一定的通用性不同，exploit 往往是针对特定漏洞而言的。</li>\n</ul>\n<h1 id=\"0x03-shellcodeexploit\"><a class=\"anchor\" href=\"#0x03-shellcodeexploit\">#</a> 0x03 ShellCode&amp;Exploit</h1>\n<ul>\n<li>两者之间的关系\n<ul>\n<li>漏洞利用的过程就好像一枚导弹飞向目标的过程。导弹的设计者关注的是怎样计算飞行路线，锁定目标，最终把弹头精确地运载到目的地并引爆，而并不关心所承载的弹头到底是用来在地上砸一个坑的铅球，还是用来毁灭一个国家的核弹头；这就如同 exploit 关心的是怎样淹没返回地址，获得进程控制权，把 EIP 传递给 shellcode 让其得到执行并发挥作用，而不关心 shellcode 到底是弹出一个消息框的恶作剧，还是用于格式化对方硬盘的穷凶极恶的代码。</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"0x04-工具介绍-metasploit\"><a class=\"anchor\" href=\"#0x04-工具介绍-metasploit\">#</a> 0x04 工具介绍 - MetaSploit</h1>\n<ul>\n<li>设计思想：随着现代化软件开发技术的发展，模块化、封装、代码重用等思想在漏洞利用技术中也得以体现。试想如果仿照武器的设计思想，分开设计导弹和弹头，将各自的技术细节封装起来，使用标准化的接口，漏洞利用的过程将更容易实现。</li>\n<li>Metasploit 通过规范化 exploit 和 shellcode 之间的接口把漏洞利用的过程封装成易用的模块，大大减少了 expliot 开发过程中的重复工作，深刻体现了代码重用和模块化、结构化的思想。在这个平台中：\n<ol>\n<li>所有的 exploit 都使用漏洞名称来命名，里边包含有这个漏洞的函数返回地址，所使用的跳转指令地址等关键信息。</li>\n<li>将常用的 shellcode（例如，用于绑定端口反向连接、执行任意命令等）封装成一个个通用的模块，可以轻易地与任意漏洞的 exploit 进行组合。</li>\n</ol>\n</li>\n</ul>\n",
            "tags": [
                "二进制",
                "0day安全"
            ]
        },
        {
            "id": "https://z-sy.github.io/2021/01/21/penetration-test-2021-01-21-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/",
            "url": "https://z-sy.github.io/2021/01/21/penetration-test-2021-01-21-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/",
            "title": "主动信息收集",
            "date_published": "2021-01-21T15:50:20.000Z",
            "content_html": "<h1 id=\"0x00-开篇\"><a class=\"anchor\" href=\"#0x00-开篇\">#</a> 0x00 开篇</h1>\n<ul>\n<li><span class=\"kbd\">勉励语 - 学如不及，犹恐失之</span></li>\n</ul>\n<h1 id=\"0x01-开篇\"><a class=\"anchor\" href=\"#0x01-开篇\">#</a> 0x01 开篇</h1>\n<ul>\n<li>直接与目标系统交互，无法避免留下访问的痕迹</li>\n<li>一般多使用受控的电脑进行探测，如使用代理或者已被控制的主机。要做好被封杀的准备，同时过程中要记得迷惑对方，隐藏真实流量。</li>\n<li>发送不同的探测，判断目标状态</li>\n</ul>\n<h1 id=\"0x02-发现阶段\"><a class=\"anchor\" href=\"#0x02-发现阶段\">#</a> 0x02 发现阶段</h1>\n<ul>\n<li>作用：识别活着的主机</li>\n<li>对于协议层的二层发现来讲，扫描速度快、可靠但是缺点就是不可路由。</li>\n<li>ARP 协议\n<ul>\n<li>arping</li>\n<li>nmap</li>\n<li>Netdiscover</li>\n<li>等等</li>\n</ul>\n</li>\n<li>练习时候建议结合 WiresShark 软件，抓网卡包，结合协议定义理解</li>\n</ul>\n",
            "tags": [
                "渗透测试",
                "主动信息收集"
            ]
        },
        {
            "id": "https://z-sy.github.io/2021/01/17/binary-2021-01-17-0day%E5%AE%89%E5%85%A8%E6%B8%A9%E4%B9%A0-05/",
            "url": "https://z-sy.github.io/2021/01/17/binary-2021-01-17-0day%E5%AE%89%E5%85%A8%E6%B8%A9%E4%B9%A0-05/",
            "title": "0day安全温习-05",
            "date_published": "2021-01-17T14:50:25.000Z",
            "content_html": "<h1 id=\"0x00-开篇\"><a class=\"anchor\" href=\"#0x00-开篇\">#</a> 0x00 开篇</h1>\n<ul>\n<li><span class=\"kbd\">勉励语 - 盛年不重来，一日难再晨</span></li>\n</ul>\n<h1 id=\"0x01-代码植入原理\"><a class=\"anchor\" href=\"#0x01-代码植入原理\">#</a> 0x01 代码植入原理</h1>\n<ul>\n<li>淹没函数返回地址，同时，将返回地址指向我们自己部署的代码中</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;windows.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">PASSWORD </span><span class=\"token string\">\"1234567\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">verify_password</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>password<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> authenticated<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">char</span> buffer<span class=\"token punctuation\">[</span><span class=\"token number\">44</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    authenticated<span class=\"token operator\">=</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">,</span>PASSWORD<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">,</span>password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//over flowed here!</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">return</span> authenticated<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">int</span> valid_flag<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">char</span> password<span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    FILE <span class=\"token operator\">*</span> fp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token function\">LoadLibrary</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user32.dll\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//prepare for messagebox </span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>fp<span class=\"token operator\">=</span><span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"password.txt\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"rw+\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token function\">fscanf</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">,</span><span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span>password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    valid_flag <span class=\"token operator\">=</span> <span class=\"token function\">verify_password</span><span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>valid_flag<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"incorrect password!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Congratulation! You have passed the verification!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token function\">fclose</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"0x02-调用测试函数messageboxa\"><a class=\"anchor\" href=\"#0x02-调用测试函数messageboxa\">#</a> 0x02 调用测试函数 MessageBoxA</h1>\n<ul>\n<li>用汇编语言调用 MessageboxA 需要 3 个步骤。</li>\n<li>（1）装载动态链接库 user32.dll。MessageBoxA 是动态链接库 user32.dll 的导出函数。虽然大多数有图形化操作界面</li>\n<li>程序都已经装载了这个库，但是我们用来实验的 consol 版并没有默认加载它。</li>\n<li>（2）在汇编语言中调用这个函数需要获得这个函数的入口地址。</li>\n<li>（3）在调用前需要向栈中按从右向左的顺序压入 MessageBoxA 的 4 个参数。</li>\n<li>为了让植入的机器代码更加简洁明了，我们在实验准备中构造漏洞程序的时候已经人工加载了 user32.dll 这个库，所以第一步操作不用在汇编语言中考虑。</li>\n<li>MessageBoxA 的入口参数可以通过 user32.dll 在系统中加载的基址和 MessageBoxA 在库中的偏移相加得到。具体的我们可以使用 VC6.0 自带的小工具 “Dependency Walker” 获得这些信息。</li>\n</ul>\n<h1 id=\"0x03-部署代码淹没函数返回地址\"><a class=\"anchor\" href=\"#0x03-部署代码淹没函数返回地址\">#</a> 0x03 部署代码，淹没函数返回地址</h1>\n<ul>\n<li>将相应十六进制代码录入到文件中，并在溢出至返回地址位置开始调整返回地址</li>\n</ul>\n",
            "tags": [
                "二进制",
                "0day安全"
            ]
        },
        {
            "id": "https://z-sy.github.io/2021/01/12/algorithm-2021-01-12-%E6%89%BE%E5%87%BA%E6%89%80%E6%9C%89%E5%8F%98%E4%BD%8D%E8%AF%8D%E5%88%86%E7%B1%BB/",
            "url": "https://z-sy.github.io/2021/01/12/algorithm-2021-01-12-%E6%89%BE%E5%87%BA%E6%89%80%E6%9C%89%E5%8F%98%E4%BD%8D%E8%AF%8D%E5%88%86%E7%B1%BB/",
            "title": "找出所有变位词分类",
            "date_published": "2021-01-12T12:36:34.000Z",
            "content_html": "<h1 id=\"0x00-开篇\"><a class=\"anchor\" href=\"#0x00-开篇\">#</a> 0x00 开篇</h1>\n<ul>\n<li><span class=\"kbd\">勉励语 - 百尺竿头，更进一步</span></li>\n</ul>\n<h1 id=\"0x01-问题-找出所有的变位词分类\"><a class=\"anchor\" href=\"#0x01-问题-找出所有的变位词分类\">#</a> 0x01 问题 - 找出所有的变位词分类</h1>\n<ul>\n<li>输入 - 带有 n 个元素的单词字典</li>\n<li>输出 - 有多少个同类的变位词并列出元素</li>\n<li>约束 - 以最小代价进行</li>\n</ul>\n<h1 id=\"0x02-问题分析\"><a class=\"anchor\" href=\"#0x02-问题分析\">#</a> 0x02 问题分析</h1>\n<ul>\n<li>任何一种考虑单词的所有字母的排列的方法都注定了要失败，在经历了排列组合计算再加上对比属于哪一分类的计算所花的时间开销是惊人的。所以考虑标识法即标识字典中的每一个词，是的在具有相同变位词类中的单词具有相同的标识。然后，将所有具有相同标识的词集中在一起。由此，变位词问题分解为两个子问题 ---①选择标识②集中具有相同标识的单词。</li>\n</ul>\n<h1 id=\"0x03-应用算法\"><a class=\"anchor\" href=\"#0x03-应用算法\">#</a> 0x03 应用算法</h1>\n<ol>\n<li>选择标识 - 可以简单的采用将单词中的字母按照字母表中的顺寻排序，例如 &quot;deposit&quot; 的标识就是 &quot;deiopst&quot;，这也是其他任何在该类中的标识。</li>\n<li>集中所有具有相同标识的单词 - Tom Cargill 的翻手表示：先用一种方式排序（水平翻手），再用另一种方式排序（垂直翻手）</li>\n<li>变位词程序的实现划分为三个子模块：sign、sort 和 squash。输入经过 sign 得到排列好的标识；sign 后的输出作为 sort 后的输入，将所有具有相同标识的单词归拢到一起；经过 sort 后的输出作为 squash 的输入进行格式化，具有同一标识的输出到同一行，不同标识的给换行到下一行。</li>\n</ol>\n<div class=\"note info\">\n<p>sign 模块 - while 循环每次读取一个字符串到 word 中，直至文件末尾为止。strcpy 函数赋值输入单词到 sig 中，然后调用 C 标准库函数 qsort 对单词 sig 中的字母进行排序（参数介绍 - 待排序的数组、数组的长度、每个待排序项的字节数以及比较两个项的函数名。本例中，待比较项为单词中的字母）。最后 printf 语句依次打印标识、单词本身和换行符</p>\n</div>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//sign 模块</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">charcomp</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>x<span class=\"token punctuation\">,</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">return</span> <span class=\"token operator\">*</span>x<span class=\"token operator\">-</span><span class=\"token operator\">*</span>y<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">WORDMAX <span class=\"token number\">100</span></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">char</span> word<span class=\"token punctuation\">[</span>WORDMAX<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>sig<span class=\"token punctuation\">[</span>WORDMAX<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span>word<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token constant\">EOF</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>sig<span class=\"token punctuation\">,</span>word<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token function\">qsort</span><span class=\"token punctuation\">(</span>sig<span class=\"token punctuation\">,</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>sig<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>charcomp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s %s\\n\"</span><span class=\"token punctuation\">,</span>sig<span class=\"token punctuation\">,</span>word<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><div class=\"note info\">\n<p>sort 模块 - 归拢收纳具有同一标识的单词，采用系统默认排序即可</p>\n</div>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//sort 模块</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 略</span></pre></td></tr></table></figure><div class=\"note info\">\n<p>squash 模块 - 将归拢收纳具有同一标识的单词，在同一行中打印出来，不同标识的换行处理。大部分工作使用第二个 printf 完成。对于每一个输入行，该语句输出第二个字段，后面跟一个空格，if 语句捕捉标识之间的差异。如果 sig 与 oldsig 不同，那么就打印换行符（有判断条件可知，第一个字符除外）。最后一个 printf 输出最后一个换行符。</p>\n</div>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//squash 模块</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">WORDMAX <span class=\"token number\">100</span></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">char</span> word<span class=\"token punctuation\">[</span>WORDMAX<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>sig<span class=\"token punctuation\">[</span>WORDMAX<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>oldsig<span class=\"token punctuation\">[</span>WORDMAX<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">int</span> linenum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>oldsig<span class=\"token punctuation\">,</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s %s\"</span><span class=\"token punctuation\">,</span>sig<span class=\"token punctuation\">,</span>word<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token constant\">EOF</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>oldsig<span class=\"token punctuation\">,</span>sig<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> linenum <span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>oldsig<span class=\"token punctuation\">,</span>sig<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        linenum<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s \"</span><span class=\"token punctuation\">,</span>word<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>bash 中执行程序测试。假设 dictionary 为存储单词的字典，数量为 230000，将其重定向至 sign 的输入，通过管道连接 sign 的输出至 sort，同理连接 sort 的输出至 squash，并将 squash 的输出写入到文件 gramlist。程序完成。运行时间 18 秒：sign 用时 4 秒，sort 用时 11 秒而 squash 用时 3 秒。</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@bash<span class=\"token comment\">#]sign &lt; dictionary | sort | squash > gramlist</span></pre></td></tr></table></figure>",
            "tags": [
                "算法",
                "编程珠玑"
            ]
        },
        {
            "id": "https://z-sy.github.io/2021/01/11/binary-2021-01-11-0day%E5%AE%89%E5%85%A8%E6%B8%A9%E4%B9%A0-04/",
            "url": "https://z-sy.github.io/2021/01/11/binary-2021-01-11-0day%E5%AE%89%E5%85%A8%E6%B8%A9%E4%B9%A0-04/",
            "title": "0day安全温习-04",
            "date_published": "2021-01-11T15:04:51.000Z",
            "content_html": "<h1 id=\"0x00-开篇\"><a class=\"anchor\" href=\"#0x00-开篇\">#</a> 0x00 开篇</h1>\n<ul>\n<li><span class=\"kbd\">勉励语 - 知不足者好学，耻下问者自满</span></li>\n</ul>\n<h1 id=\"0x01-修改邻接变量\"><a class=\"anchor\" href=\"#0x01-修改邻接变量\">#</a> 0x01 修改邻接变量</h1>\n<ul>\n<li>当了解函数调用的细节和栈中数据的分布情况，那么对结构进行一些特殊构造和破坏是可能的函数的局部变量在栈中一个挨着一个排列。如果这些局部变量中有数组之类的缓冲区，并且程序中存在数组越界的缺陷，那么越界的数组元素就有可能破坏栈中相邻变量的值，甚至破坏栈帧中所保存的 EBP 值、返回地址等重要数据。</li>\n</ul>\n<h1 id=\"0x02-注意事项\"><a class=\"anchor\" href=\"#0x02-注意事项\">#</a> 0x02 注意事项</h1>\n<ul>\n<li>观察内存的时候应当注意 “内存数据” 与 “数值数据” 的区别。在我们的调试环境中，内存由低到高分布，您可以简单地把这种情形理解成 Win32 系统在内存中由低位向高位存储一个 4 字节的双字（DWORD），但在作为 “数值” 应用的时候，却是按照由高位字节向低位字节进行解释。这样一来，在我们的调试环境中，“内存数据” 中的 DWORD 和我们逻辑上使用的 “数值数据” 是按字节序逆序过的。</li>\n<li>例如，变量 authenticated 在内存中存储为 0x 01 00 00 00，这个 “内存数据” 的双字会被计算机由高位向低位按字节解释成 “数值数据” 0x 00 00 00 01。出于便于阅读的目的，OllyDbg 在栈区显示的时候已经将内存中双字的字节序反转了，也就是说，栈区栏显示的是 “数值数据”，而不是原始的 “内存数据”，所以，在栈内看数据时，从左向右对于左边地址的偏移依次为 3、 2、1、0。</li>\n</ul>\n",
            "tags": [
                "二进制",
                "0day安全"
            ]
        },
        {
            "id": "https://z-sy.github.io/2021/01/10/penetration-test-2021-01-10-Shodan/",
            "url": "https://z-sy.github.io/2021/01/10/penetration-test-2021-01-10-Shodan/",
            "title": "Shodan",
            "date_published": "2021-01-10T11:59:58.000Z",
            "content_html": "<h1 id=\"0x00-开篇\"><a class=\"anchor\" href=\"#0x00-开篇\">#</a> 0x00 开篇</h1>\n<ul>\n<li><span class=\"kbd\">勉励语 - 不登高山，不知天之高也；不临深溪，不知地之厚也</span></li>\n</ul>\n<h1 id=\"0x01-介绍\"><a class=\"anchor\" href=\"#0x01-介绍\">#</a> 0x01 介绍</h1>\n<ul>\n<li>Shodan 是一个搜索引擎，但它与 Google 这种搜索网址的搜索引擎不同，Shodan 是用来搜索网络空间中在线设备的，你可以通过 Shodan 搜索指定的设备，或者搜索特定类型的设备。</li>\n</ul>\n<h1 id=\"0x02-过滤器\"><a class=\"anchor\" href=\"#0x02-过滤器\">#</a> 0x02 过滤器</h1>\n<div class=\"note info\">\n<p>简要列出，具体可查看 Shodan 官方文档</p>\n</div>\n<ul>\n<li>hostname：搜索指定的主机或域名，例如 hostname:&quot;google&quot;</li>\n<li>port：搜索指定的端口或服务，例如 port:&quot;21&quot;</li>\n<li>country：搜索指定的国家，例如 country:&quot;CN&quot;</li>\n<li>city：搜索指定的城市，例如 city:&quot;Hefei&quot;</li>\n<li>org：搜索指定的组织或公司，例如 org:&quot;google&quot;</li>\n<li>isp：搜索指定的 ISP 供应商，例如 isp:&quot;China Telecom&quot;</li>\n<li>product：搜索指定的操作系统 / 软件 / 平台，例如 product:&quot;Apache httpd&quot;</li>\n<li>version：搜索指定的软件版本，例如 version:&quot;1.6.2&quot;</li>\n<li>geo：搜索指定的地理位置，参数为经纬度，例如 geo:&quot;31.8639, 117.2808&quot;</li>\n<li>before/after：搜索指定收录时间前后的数据，格式为 dd-mm-yy，例如 before:&quot;11-11-15&quot;</li>\n<li>net：搜索指定的 IP 地址或子网，例如 net:&quot;210.45.240.0/24&quot;</li>\n<li>等等</li>\n</ul>\n<h1 id=\"0x03-官网\"><a class=\"anchor\" href=\"#0x03-官网\">#</a> 0x03 官网</h1>\n<div class=\"note info\">\n<p>善于运用搜索引擎，收集开放信息</p>\n</div>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuc2hvZGFuLmlv\">Shodan 官网链接</span></li>\n</ul>\n",
            "tags": [
                "渗透测试",
                "被动信息收集"
            ]
        },
        {
            "id": "https://z-sy.github.io/2021/01/07/penetration-test-2021-01-07-WireShark/",
            "url": "https://z-sy.github.io/2021/01/07/penetration-test-2021-01-07-WireShark/",
            "title": "WireShark",
            "date_published": "2021-01-07T15:01:51.000Z",
            "content_html": "<h1 id=\"0x00-开篇\"><a class=\"anchor\" href=\"#0x00-开篇\">#</a> 0x00 开篇</h1>\n<ul>\n<li><span class=\"kbd\">勉励语 - 志当存高远</span></li>\n</ul>\n<h1 id=\"0x01-介绍\"><a class=\"anchor\" href=\"#0x01-介绍\">#</a> 0x01 介绍</h1>\n<pre><code>* wireshark是非常流行的网络封包分析软件，功能十分强大。可以截取各种网络封包，显示网络封包的详细信息，开源软件。\n</code></pre>\n<div class=\"note info\">\n<p>为了安全考虑，wireshark 只能查看封包，而不能修改封包的内容，或者发送封包</p>\n</div>\n<h1 id=\"0x02-使用场景\"><a class=\"anchor\" href=\"#0x02-使用场景\">#</a> 0x02 使用场景</h1>\n<div class=\"note info\">\n<p>包括但不限于</p>\n</div>\n<pre><code>1. 网络管理员会使用wireshark来检查网络问题\n2. 软件测试工程师使用wireshark抓包，来分析自己测试的软件\n3. 从事socket编程的工程师会用wireshark来调试\n4. ...\n</code></pre>\n<h1 id=\"0x03-主要界面\"><a class=\"anchor\" href=\"#0x03-主要界面\">#</a> 0x03 主要界面</h1>\n<pre><code>1. Display Filter(显示过滤器)，  用于过滤\n2. Packet List Pane(封包列表)，显示捕获到的封包，有源地址和目标地址，端口号。颜色不同，代表\n3. Packet Details Pane(封包详细信息), 显示封包中的字段\n4. Dissector Pane(16进制数据)\n5. Miscellanous(地址栏，杂项)\n</code></pre>\n<h1 id=\"0x04-链接地址\"><a class=\"anchor\" href=\"#0x04-链接地址\">#</a> 0x04 链接地址</h1>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cud2lyZXNoYXJrLm9yZw==\">官网链接</span></li>\n</ul>\n",
            "tags": [
                "渗透测试",
                "WireShark"
            ]
        },
        {
            "id": "https://z-sy.github.io/2021/01/05/penetration-test-2021-01-05-nc%E5%91%BD%E4%BB%A4/",
            "url": "https://z-sy.github.io/2021/01/05/penetration-test-2021-01-05-nc%E5%91%BD%E4%BB%A4/",
            "title": "nc命令",
            "date_published": "2021-01-05T15:13:01.000Z",
            "content_html": "<h1 id=\"0x00-开篇\"><a class=\"anchor\" href=\"#0x00-开篇\">#</a> 0x00 开篇</h1>\n<ul>\n<li><span class=\"kbd\">勉励语 - 积土而为山，积水而为海</span></li>\n</ul>\n<h1 id=\"0x01-介绍\"><a class=\"anchor\" href=\"#0x01-介绍\">#</a> 0x01 介绍</h1>\n<pre><code>* nc作用\n    * 实现任意TCP/UDP端口的侦听，nc可以作为server以TCP或UDP方式侦听指定端口\n    * 端口的扫描，nc可以作为client发起TCP或UDP连接\n    * 机器之间传输文件\n    * 机器之间网络测速\n</code></pre>\n<h1 id=\"0x02-常用参数\"><a class=\"anchor\" href=\"#0x02-常用参数\">#</a> 0x02 常用参数</h1>\n<pre><code>* -l    用于指定nc将处于侦听模式。指定该参数，则意味着nc被当作server，侦听并接受连接，而非向其它地址发起连接。\n* -p    暂未用到（老版本的nc可能需要在端口号前加-p参数，下面测试环境是centos6.6，nc版本是nc-1.84，未用到-p参数）\n* -s    指定发送数据的源IP地址，适用于多网卡机\n* -u    指定nc使用UDP协议，默认为TCP\n* -v    输出交互或出错信息，新手调试时尤为有用\n* -w    超时秒数，后面跟数字\n</code></pre>\n<h1 id=\"0x03-使用示例\"><a class=\"anchor\" href=\"#0x03-使用示例\">#</a> 0x03 使用示例</h1>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#传输信息</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span>root@bash<span class=\"token comment\">#] nc -l -p 4444 #启动 tcp 端口 4444 并监听</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">[</span>root@bash<span class=\"token comment\">#] nc -nv 1.1.1.1 4444 #连接服务器主机的 4444 端口</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#传输文件</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">[</span>root@bash<span class=\"token comment\">#] nc -l -p 4444 > 1.mp4 #启动 tcp 端口 4444 并监听，收到的数据重定向到 1.mp4 文件</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">[</span>root@bash<span class=\"token comment\">#] nc -nv 1.1.1.1 4444 &lt; 1.mp4 -q 1 #连接服务器主机的 4444 端口，并传输 1.mp4 文件，-q 1 参数为传输完延迟 1 秒退出</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">#流媒体服务</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">[</span>root@bash<span class=\"token comment\">#] cat 1.mp4 | nc -lp 333 #打开 1.mp4 文件并将数据流通过管道传输给 333 端口</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">[</span>root@bash<span class=\"token comment\">#] nc -nv 1.1.1.1 333 | mpplayer -vo x11 -cache 3000 #连接 333 端口并接收数据传输到 mpplayer 播放器</span></pre></td></tr></table></figure>",
            "tags": [
                "渗透测试",
                "nc命令"
            ]
        },
        {
            "id": "https://z-sy.github.io/2021/01/04/algorithm-2021-01-04-%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%E7%9A%84%E5%A8%81%E5%8A%9B/",
            "url": "https://z-sy.github.io/2021/01/04/algorithm-2021-01-04-%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%E7%9A%84%E5%A8%81%E5%8A%9B/",
            "title": "基本操作的威力",
            "date_published": "2021-01-04T12:29:38.000Z",
            "content_html": "<h1 id=\"0x00-开篇\"><a class=\"anchor\" href=\"#0x00-开篇\">#</a> 0x00 开篇</h1>\n<ul>\n<li><span class=\"kbd\">勉励语 - 去留无意，闲看庭前花开花落；宠辱不惊，漫随天外云卷云舒</span></li>\n</ul>\n<h1 id=\"0x01-问题-一次友好的对话\"><a class=\"anchor\" href=\"#0x01-问题-一次友好的对话\">#</a> 0x01 问题 - 一次友好的对话</h1>\n<ul>\n<li>输入 - n 元一维向量</li>\n<li>输出 - 向左旋转 i 个位置的 n 元一维向量</li>\n<li>约束 - 仅使用几十个额外字节的内存空间，在正比于 n 的时间内完成向量的旋转</li>\n</ul>\n<h1 id=\"0x02-问题分析\"><a class=\"anchor\" href=\"#0x02-问题分析\">#</a> 0x02 问题分析</h1>\n<ul>\n<li>假设 n=8，i=3，向量 abcdefgh 旋转为向量 defghabc。简单的代码使用一个 n 元的中间向量在 n 步内可完成该工作。</li>\n</ul>\n<h1 id=\"0x03-应用算法\"><a class=\"anchor\" href=\"#0x03-应用算法\">#</a> 0x03 应用算法</h1>\n<ol>\n<li>将向量 x 中的前 i 个元素复制到一个临时数组中，接着将余下的 n-i 个元素左移 i 个位置，然后再将前 i 个元素从临时数组中复制到 x 中余下的位置。</li>\n</ol>\n<div class=\"note info\">\n<p>这种方法使用了 i 个额外的位置，如果 i 很大则产生了过大的存储空间的消耗</p>\n</div>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    string s <span class=\"token operator\">=</span> <span class=\"token string\">\"abcdefghijklmn\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    cout<span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"The origin is: \"</span><span class=\"token operator\">&lt;&lt;</span>s<span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 左移个数</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    cin<span class=\"token operator\">>></span>i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">></span>s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        i <span class=\"token operator\">=</span> i<span class=\"token operator\">%</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 将前 i 个元素临时保存</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    string <span class=\"token function\">tmp</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">// 将剩余的左移 i 个位置</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        s<span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    s <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> tmp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    cout<span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"The result is: \"</span><span class=\"token operator\">&lt;&lt;</span>s<span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>定义一个函数将 x 向左旋转一个位置（其时间正比于 n），然后调用该函数 i 次。</li>\n</ol>\n<div class=\"note info\">\n<p>这种方法虽然空间复杂度为 O (1)，但产生了过多的运行时间消耗</p>\n</div>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">rotateOnce</span><span class=\"token punctuation\">(</span>string <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">char</span> tmp <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        s<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    s<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre> </pre></td></tr><tr><td data-num=\"16\"></td><td><pre> </pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    string s <span class=\"token operator\">=</span> <span class=\"token string\">\"abcdefghijklmn\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"The origin is: \"</span> <span class=\"token operator\">&lt;&lt;</span> s <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">// 左移个数</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    cin <span class=\"token operator\">>></span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">></span> s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        i <span class=\"token operator\">=</span> i<span class=\"token operator\">%</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token comment\">// 调用函数 i 次</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token function\">rotateOnce</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"The result is: \"</span><span class=\"token operator\">&lt;&lt;</span> s <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>移动 x [0] 到临时变量 t 中，然后移动 x [i] 到 x [0] 中，x [2i] 到 x [i]，依次类推，直到我们又回到 x [0] 的位置提取元素，此时改为从临时变量 t 中提取元素，然后结束该过程（当下标大于 n 时对 n 取模或者减去 n）。如果该过程没有移动全部的元素，就从 x [1] 开始再次进行移动，总共移动 i 和 n 的最大公约数次。</li>\n</ol>\n<div class=\"note info\">\n<p>这种方法非常精巧，像书中所说的一样堪称巧妙的杂技表演。空间复杂度为 O (1)，时间复杂度为线性时间，满足问题的性能要求，但还不是最佳</p>\n</div>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 欧几里德（辗转相除）算法求最大公约数</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">gcd</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> j<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">></span> j<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            i <span class=\"token operator\">=</span> i<span class=\"token operator\">%</span>j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token keyword\">return</span> j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>j <span class=\"token operator\">></span> i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            j <span class=\"token operator\">=</span> j<span class=\"token operator\">%</span>i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>j <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre> </pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    string s <span class=\"token operator\">=</span> <span class=\"token string\">\"abcdefghijklmn\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"The origin is: \"</span><span class=\"token operator\">&lt;&lt;</span> s <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token comment\">// 左移个数</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    cin <span class=\"token operator\">>></span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">></span> s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        i <span class=\"token operator\">=</span> i<span class=\"token operator\">%</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token comment\">// 移动</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">char</span> tmp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token keyword\">int</span> times <span class=\"token operator\">=</span> <span class=\"token function\">gcd</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">&lt;</span>times<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        tmp <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token keyword\">int</span> pre <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 记录上一次的位置</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token keyword\">int</span> t <span class=\"token operator\">=</span> pre<span class=\"token operator\">+</span>i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">>=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                t <span class=\"token operator\">=</span> t<span class=\"token operator\">-</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">==</span> j<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 直到 tmp 原来的位置 j 为止</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            s<span class=\"token punctuation\">[</span>pre<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            pre <span class=\"token operator\">=</span> t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        s<span class=\"token punctuation\">[</span>pre<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"The result is: \"</span><span class=\"token operator\">&lt;&lt;</span> s <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>旋转向量 x 实际上就是交换向量 ab 的两段，得到向量 ba，这里 a 代表 x 的前 i 个元素。假设 a 比 b 短。将 b 分割成 bl 和 br，使 br 的长度和 a 的长度一样。交换 a 和 br，将 ablbr 转换成 brbla。因为序列 a 已在它的最终位置了，所以我们可以集中精力交换 b 的两个部分了。由于这个新问题和原先的问题是一样的，所以我们以递归的方式进行解决。</li>\n</ol>\n<div class=\"note info\">\n<p>这种方法可以得到优雅的程序，但是需要巧妙的代码，并且要进行一些思考才能看出它的效率足够高</p>\n</div>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 略</span></pre></td></tr></table></figure><ol start=\"5\">\n<li>（最佳）将这个问题看做是把数组 ab 转换成 ba，同时假定我们拥有一个函数可以将数组中特定部分的元素逆序。从 ab 开始，首先对 a 求逆，得到 arb，然后对 b 求逆，得到 arbr。最后整体求逆，得到（arbr）r，也就是 ba。</li>\n</ol>\n<div class=\"note info\">\n<p>求逆序的方法在时间和空间上都很高效，而且代码非常简短，很难出错</p>\n</div>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span>string <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> begin<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> end<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>begin <span class=\"token operator\">&lt;</span> end<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">char</span> tmp <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>begin<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        s<span class=\"token punctuation\">[</span>begin<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        s<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token operator\">++</span>begin<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token operator\">--</span>end<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre> </pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    string s <span class=\"token operator\">=</span> <span class=\"token string\">\"abcdefghijklmn\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"The origin is: \"</span><span class=\"token operator\">&lt;&lt;</span> s <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>     </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    cin <span class=\"token operator\">>></span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">></span> s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        i <span class=\"token operator\">=</span> i<span class=\"token operator\">%</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre> </pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre> </pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"The result is: \"</span><span class=\"token operator\">&lt;&lt;</span> s <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"0x04-补充链接\"><a class=\"anchor\" href=\"#0x04-补充链接\">#</a> 0x04 补充链接</h1>\n<ul>\n<li>本文主要摘选自<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vc29uZ2xlZS9wLzU3MzgxNDYuaHRtbA==\">神奕</span></li>\n</ul>\n",
            "tags": [
                "算法",
                "编程珠玑"
            ]
        },
        {
            "id": "https://z-sy.github.io/2021/01/03/penetration-test-2021-01-03-BurpSuite/",
            "url": "https://z-sy.github.io/2021/01/03/penetration-test-2021-01-03-BurpSuite/",
            "title": "BurpSuite",
            "date_published": "2021-01-03T09:36:26.000Z",
            "content_html": "<h1 id=\"0x00-开篇\"><a class=\"anchor\" href=\"#0x00-开篇\">#</a> 0x00 开篇</h1>\n<ul>\n<li><span class=\"kbd\">勉励语 - 书山有路勤为径，学海无涯苦作舟</span></li>\n</ul>\n<h1 id=\"0x01-介绍\"><a class=\"anchor\" href=\"#0x01-介绍\">#</a> 0x01 介绍</h1>\n<p>BurpSuite 是进行 Web 应用安全测试集成平台。它将各种安全工具无缝地融合在一起，以支持整个测试过程中，从最初的映射和应用程序的攻击面分析，到发现和利用安全漏洞。其模块几乎包含整个安全测试过程，从最初对目标程序的信息采集，到漏洞扫描及其利用，多模块间高融合的配合，使得安全测试的过程更加高效。</p>\n<h1 id=\"0x02-主要模块\"><a class=\"anchor\" href=\"#0x02-主要模块\">#</a> 0x02 主要模块</h1>\n<ol>\n<li>Dashboard</li>\n<li>Proxy</li>\n<li>Intruder</li>\n<li>Repeater</li>\n<li>Decoder</li>\n</ol>\n<h1 id=\"0x03-模块简介\"><a class=\"anchor\" href=\"#0x03-模块简介\">#</a> 0x03 模块简介</h1>\n<ol>\n<li><span class=\"kbd\">Proxy</span> - 代理模块作为 BurpSuite 的核心功能，拦截 HTTP/S 的代理服务器，作为一个在浏览器和目标应用程序之间的中间人，允许拦截，查看，修改在两个方向上的原始数据流。\n<ul>\n<li><span class=\"kbd\">intercept 选项</span> - 用于显示修改 HTTP 请求及响应内容，并可以将拦截的 HTTP 请求快速发送至其他模块处理。\n<ul>\n<li><span class=\"kbd\">Forward</span> - 用于发送数据。当把所需要的 HTTP 请求编辑编辑完成后，手动发送数据。</li>\n<li><span class=\"kbd\">Drop</span> - 将该请求包丢弃。</li>\n<li><span class=\"kbd\">Intercept is off/on</span> - 拦截开关。当处于 off 状态下时，BurpSuite 会自动转发所拦截的所有请求；当处于 on 状态下时，BurpSuite 会将所有拦截所有符合规则的请求并将它显示出来等待编辑或其他操作。</li>\n<li><span class=\"kbd\">Action</span> - 功能菜单，与右键菜单内容相同，在这可以将请求包发送到其他的模块或者对数据包进行其他的操作。</li>\n</ul>\n</li>\n<li><span class=\"kbd\">http history 选项</span> - 这里将记录经过代理服务器访问的所有请求，即使当 Intercept is off 时也会记录。记录包括：#(请求索引号)、Host (主机)、Method (请求方式)、URL (请求地址)、Params (参数)、Edited (编辑)、Status (状态)、Length (响应字节长度)、MIME type (响应的 MLME 类型)、Extension (地址文件扩展名)、Title (页面标题)、Comment (注释)、SSL、IP (目标 IP 地址)、Cookies、Time (发出请求时间)、Listener port (监听端口)。</li>\n<li><span class=\"kbd\">WebSockets history 选项</span> - 用于记录 WebSockets 的数据包，是 HTML5 中最强大的通信功能，定义了一个全双工的通信信道，只需 Web 上的一个 Socket 即可进行通信，能减少不必要的网络流量并降低网络延迟。</li>\n<li><span class=\"kbd\">Options 选项</span> - 主要用于设置代理监听、请求和响应，拦截反应，匹配和替换，ssl 等。</li>\n</ul>\n</li>\n</ol>\n<div class=\"note info\">\n<p>在 BurpSuite 任何请求处，右键菜单选择 “Send to intruder” 选项，将自动发送到此模块下并自动相关内容。</p>\n</div>\n<ol start=\"2\">\n<li><span class=\"kbd\">Intruder</span> - 用于自动对 Web 应用程序自定义的攻击。它可以用来自动执行您的测试过程中可能出现的所有类型的任务。例如目录爆破，注入，密码爆破等。\n<ul>\n<li><span class=\"kbd\">Target 选项</span> - 用于配置目标服务器进行攻击的详细信息。\n<ul>\n<li><span class=\"kbd\">Host</span> - 这是目标服务器的 IP 地址或主机名。</li>\n<li><span class=\"kbd\">Port</span> - 这是目标服务的端口号。</li>\n<li><span class=\"kbd\">Use HTTPS</span> - 这指定的 SSL 是否应该被使用.</li>\n</ul>\n</li>\n<li><span class=\"kbd\">Positions 选项</span> - 设置 Payloads 的插入点以及攻击类型（攻击模式）。</li>\n<li><span class=\"kbd\">Payloads 选项</span> - 设置 payload，配置字典。</li>\n<li><span class=\"kbd\">Opetions 选项</span> - 此选项卡包含了 request headers，request engine，attack results ，grep match，grep_extrack，grep payloads 和 redirections。可以发动攻击之前，在主要 Intruder 的 UI 上编辑这些选项，大部分设置也可以在攻击时对已在运行的窗口进行修改。</li>\n</ul>\n</li>\n<li><span class=\"kbd\">Repeater</span> - 用于手动操作和发送个别 HTTP 请求，并分析应用程序的响应一个简单的工具。可以发送一个内部请求从 Burp 任何地方到 Repeater，修改请求并且发送。</li>\n<li><span class=\"kbd\">Decoder</span> - 将原始数据转换成各种编码和哈希表的简单工具。它能够智能地识别多种编码格式采用启发式技术。</li>\n</ol>\n<h1 id=\"0x04-补充链接\"><a class=\"anchor\" href=\"#0x04-补充链接\">#</a> 0x04 补充链接</h1>\n<ul>\n<li>本文主要摘选自<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vanNqbGl5YW5nL3AvMTA4NTMzMDcuaHRtbA==\"> BurpSuite pro v2.0 使用入门教程</span></li>\n</ul>\n",
            "tags": [
                "渗透测试",
                "BurpSuite"
            ]
        },
        {
            "id": "https://z-sy.github.io/2021/01/03/penetration-test-2021-01-03-penetration-test-introduce/",
            "url": "https://z-sy.github.io/2021/01/03/penetration-test-2021-01-03-penetration-test-introduce/",
            "title": "模块介绍",
            "date_published": "2021-01-03T09:36:25.000Z",
            "content_html": "<h1 id=\"0x00-开篇\"><a class=\"anchor\" href=\"#0x00-开篇\">#</a> 0x00 开篇</h1>\n<p>本模块主要分享总结渗透测试的相关知识</p>\n",
            "tags": [
                "渗透测试"
            ]
        },
        {
            "id": "https://z-sy.github.io/2021/01/02/algorithm-2021-01-02-%E4%B8%80%E6%AC%A1%E5%8F%8B%E5%A5%BD%E7%9A%84%E5%AF%B9%E8%AF%9D/",
            "url": "https://z-sy.github.io/2021/01/02/algorithm-2021-01-02-%E4%B8%80%E6%AC%A1%E5%8F%8B%E5%A5%BD%E7%9A%84%E5%AF%B9%E8%AF%9D/",
            "title": "一次友好的对话",
            "date_published": "2021-01-02T00:40:30.000Z",
            "content_html": "<h1 id=\"0x00-开篇\"><a class=\"anchor\" href=\"#0x00-开篇\">#</a> 0x00 开篇</h1>\n<ul>\n<li><span class=\"kbd\">勉励语 - 非淡泊无以明志，非宁静无以致远</span></li>\n</ul>\n<h1 id=\"0x01-问题-一次友好的对话\"><a class=\"anchor\" href=\"#0x01-问题-一次友好的对话\">#</a> 0x01 问题 - 一次友好的对话</h1>\n<ul>\n<li>输入 - 一个最多包含 n 个正整数的文件，每个数都小于 n，其中 n=10^7。如果在输入文件中有任何整数重复出现就是致命错误。没有其他数据与该整数相关联。</li>\n<li>输出 - 按升序排列的输入整数的列表</li>\n<li>约束 - 最多大约有 1MB 的内存空间可用，有充足的磁盘存储空间可用。运行时间最多几分钟，运行时间 10S 就不需要进一步优化了。</li>\n</ul>\n<h1 id=\"0x02-问题分析\"><a class=\"anchor\" href=\"#0x02-问题分析\">#</a> 0x02 问题分析</h1>\n<ul>\n<li>常见方式一般的以基于磁盘的<span class=\"kbd\">归并排序</span>为起点，但需对其进行调整，由于是对整数进行排序，可将原来两百行的程序减少为十几行，且一般归并排序要用到中间文件，程序将运行的更快，但是完成程序可能仍然需要几天时间。</li>\n<li>另一种解决方案利用该问题的特殊性。如果每个号码都使用 7 字节来存储，那么在可用的 1MB 存储空间大约可存 143000 个号码。如果每个号码都使用 32 位整数来表示的话，在 1MB 的存储空间里就可以存储 250000 个号码。因此，可重复遍历输入文件 40 趟来完成排序。第一趟 - 0 至 249999；第二趟 - 250000 至 499999 依此类推。对于内存中的排序来讲<span class=\"kbd\">快速排序</span>相当高效，且该程序拥有所希望的特性 - 不必考虑使用中间磁盘文件，但为此付出的代价是读取输入文件 40 次。</li>\n<li>综上两方优点 - 我们想要的读输入文件一次，且不使用中间文件。最终，问题归结为能否能够用大约 800 万个可用位来表示最多 1000 万个互异的整数。</li>\n</ul>\n<h1 id=\"0x03-应用算法\"><a class=\"anchor\" href=\"#0x03-应用算法\">#</a> 0x03 应用算法</h1>\n<ul>\n<li>位图算法。BitMap 算法的核心思想是用 bit 数组来记录 0-1 两种状态，然后再将具体数据映射到这个比特数组的具体位置，这个比特位设置成 0 表示数据不存在，设置成 1 表示数据存在。</li>\n<li>BitMap 算在在大量数据查询、去重等应用场景中使用的比较多，这个算法具有比较高的空间利用率。</li>\n</ul>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* 伪代码 */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">/* phase 1: initialize set to empty */</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  bit<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/* phase 2: insert present elements into the set */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">for</span> each i in the input file</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  bit<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">/* phase 3: write sorted output */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">if</span> bit<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    write i on the output file</pre></td></tr></table></figure>",
            "tags": [
                "算法",
                "编程珠玑"
            ]
        },
        {
            "id": "https://z-sy.github.io/2020/12/30/binary-2020-12-30-0day%E5%AE%89%E5%85%A8%E6%B8%A9%E4%B9%A0-03/",
            "url": "https://z-sy.github.io/2020/12/30/binary-2020-12-30-0day%E5%AE%89%E5%85%A8%E6%B8%A9%E4%B9%A0-03/",
            "title": "0day安全温习-03",
            "date_published": "2020-12-30T15:32:35.000Z",
            "content_html": "<h1 id=\"0x00-开篇\"><a class=\"anchor\" href=\"#0x00-开篇\">#</a> 0x00 开篇</h1>\n<ul>\n<li><span class=\"kbd\">勉励语 - 立志言为本，修身行乃先</span></li>\n</ul>\n<h1 id=\"0x01-逆向常用工具\"><a class=\"anchor\" href=\"#0x01-逆向常用工具\">#</a> 0x01 逆向常用工具</h1>\n<div class=\"note info\">\n<p>包括但不限于</p>\n</div>\n<ul>\n<li>动态分析工具\n<ul>\n<li>OllyDbg</li>\n</ul>\n</li>\n<li>静态分析工具\n<ul>\n<li>IDA Pro</li>\n</ul>\n</li>\n<li>二进制编辑器\n<ul>\n<li>UltraEdit</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"0x02-栈溢出原理与实践\"><a class=\"anchor\" href=\"#0x02-栈溢出原理与实践\">#</a> 0x02 栈溢出原理与实践</h1>\n<ul>\n<li>何为<span class=\"kbd\">栈溢出</span>\n<ul>\n<li>简单来说，缓冲区溢出就是在大缓冲区中的数据向小缓冲区复制的过程中，由于没有注意小缓冲区的边界，“撑爆” 了较小的缓冲区，从而冲掉了和小缓冲区相邻内存区域的其它数据而引起的内存问题。</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"0x03-两个寄存器esp和ebp\"><a class=\"anchor\" href=\"#0x03-两个寄存器esp和ebp\">#</a> 0x03 两个寄存器 ESP 和 EBP</h1>\n<pre><code>* ESP-栈指针寄存器(extended stack po inter)，其内存放着一个指针，该指针永远指向系统栈最上面一个栈帧的栈顶。\n* EBP-基址指针寄存器(extended base pointer)，其内存放着一个指针，该指针永远指向系统栈最上面一个栈帧的底部。\n</code></pre>\n<h1 id=\"0x04-函数调用过程\"><a class=\"anchor\" href=\"#0x04-函数调用过程\">#</a> 0x04 函数调用过程</h1>\n<pre><code>* 在形成函数栈帧一般要经历如下几个步骤：push操作进行参数入栈---&gt;call调用进行下一条返回地址的入栈操作并跳入调用函数的代码区---&gt;进入函数代码区后，一个push ebp记录当前栈帧，一个mov ebp，esp设置新栈帧的底部，一个sud esp，xxx抬高新栈帧的顶部，留出局部变量的空间。至此一个新栈帧形成。同理，函数返回步骤如下：保存返回值，通常放在EAX寄存器中---&gt;弹出当前栈帧，恢复上一个栈帧。具体操作-首先根据堆栈平衡，给ESP加上栈帧的大小，降低栈顶，回收当前栈帧空间，其次将当前栈帧底部保存的前栈帧EBP数值弹入EBP寄存器，恢复出上一个栈帧的栈帧底部，将保存的call调用的下一条指令地址弹给EIP寄存器。完成了一个新栈帧的生命周期，创建和释放。\n</code></pre>\n<div class=\"note info\">\n<p>进行缓冲出溢出实验注意事项 - 函数的调用约定和相关指令。一般，参数入栈顺序从右至左 - C、Syscall、Stdcall，其中 C 的恢复栈平衡位置在母函数，剩下的两个都在子函数。参数入栈顺序从左至右 - Basic、Fortran、Pascal，其恢复栈平衡的位置都在子函数中进行。在进行淹没溢出操作时候要注意！</p>\n</div>\n",
            "tags": [
                "二进制",
                "0day安全"
            ]
        },
        {
            "id": "https://z-sy.github.io/2020/12/28/binary-2020-12-28-0day%E5%AE%89%E5%85%A8%E6%B8%A9%E4%B9%A0-02/",
            "url": "https://z-sy.github.io/2020/12/28/binary-2020-12-28-0day%E5%AE%89%E5%85%A8%E6%B8%A9%E4%B9%A0-02/",
            "title": "0day安全温习-02",
            "date_published": "2020-12-28T15:43:28.000Z",
            "content_html": "<h1 id=\"0x00-开篇\"><a class=\"anchor\" href=\"#0x00-开篇\">#</a> 0x00 开篇</h1>\n<ul>\n<li><span class=\"kbd\">勉励语 - 风之积也不厚，则其负大翼也无力</span></li>\n</ul>\n<h1 id=\"0x01-基础\"><a class=\"anchor\" href=\"#0x01-基础\">#</a> 0x01 基础</h1>\n<ol>\n<li>PE 文件格式\n<ul>\n<li>PE 全称 - Portable Executable，是 Win32 平台下可执行文件遵守的数据格式。常见的可执行文件（如 “<em>.exe” 文件和 “</em>.dll” 文件）都是典型的 PE 文件。</li>\n</ul>\n</li>\n<li>PE 文件格式的数据节（section）\n<ul>\n<li>.text - 由编译器产生，存放着二进制的机器代码，也是我们反汇编和调试的对象</li>\n<li>.data - 初始化的数据块，如宏定义、全局变量、静态变量等</li>\n<li>.idata - 可执行文件所使用的动态链接库等外来函数与文件的信息</li>\n<li>.rsrc - 存放程序的资源，如图标、菜单等</li>\n</ul>\n<div class=\"note info\">\n<p>正常编译出的标准 PE 文件，其节信息往往是大致相同的。但这些 section 的名字只是为了方便人的记忆与使用，使用 Microsoft Visual C++ 中的编译指示符 #pragma dat a_seg () 可以把代码中的任意部分编译到 PE 的任意节中，节名也可以自己定义。如果可执行文件经过了 “加壳” 处理，PE 的节信息就会变得非常 “古怪”。在 Crack 和反病毒分析中需要经常处理这类古怪的 PE 文件</p>\n</div>\n</li>\n<li>PE 与虚拟内存之间的映射\n<ul>\n<li>何为<span class=\"kbd\">文件偏移地址</span>\n<ul>\n<li>数据在 PE 文件中的地址叫文件偏移地址，个人认为叫做文件地址更加准确。这是文件在磁盘上存放时相对于文件开头的偏移。</li>\n</ul>\n</li>\n<li>何为<span class=\"kbd\">装载基址 - Image Base</span>\n<ul>\n<li>PE 装入内存时的基地址。默认情况下，EXE 文件在内存中的基地址是 0x00400000，DLL 文件是 0x10000000。这些位置可以通过修改编译选项更改。</li>\n</ul>\n</li>\n<li>何为<span class=\"kbd\">虚拟内存地址 - Virtual Address，VA）</span>\n<ul>\n<li>PE 文件中的指令被装入内存后的地址。</li>\n</ul>\n</li>\n<li>何为<span class=\"kbd\">相对虚拟地址（Relative Virtual Address，RVA）</span>\n<ul>\n<li>相对虚拟地址是内存地址相对于映射基址的偏移量。</li>\n</ul>\n</li>\n</ul>\n<div class=\"note info\">\n<p>VA= Image Base+ RVA</p>\n</div>\n</li>\n<li>节偏移\n<ul>\n<li>产生原因 - 文件数据的存放单位与内存数据存放单位不同，文件 - 0x200；内存 - 0x1000h，对于两者不足单位的数据都会用 0x00 进行填充补全</li>\n<li>换算公式\n<ul>\n<li>文件偏移地址 = 虚拟内存地址（VA）−装载基址（Image Base）−节偏移<br />\n = RVA - 节偏移</li>\n</ul>\n</li>\n</ul>\n<div class=\"note info\">\n<p>在进行转换时，还有判断要转换的地址位于那个节内，然后减去相应的节偏移</p>\n</div>\n<ul>\n<li>工具推荐 -<span class=\"kbd\">LordPE</span></li>\n</ul>\n</li>\n</ol>\n",
            "tags": [
                "二进制",
                "0day安全"
            ]
        },
        {
            "id": "https://z-sy.github.io/2020/12/27/binary-2020-12-27-0day%E5%AE%89%E5%85%A8%E6%B8%A9%E4%B9%A0-01/",
            "url": "https://z-sy.github.io/2020/12/27/binary-2020-12-27-0day%E5%AE%89%E5%85%A8%E6%B8%A9%E4%B9%A0-01/",
            "title": "0day安全温习-01",
            "date_published": "2020-12-27T15:17:07.000Z",
            "content_html": "<h1 id=\"0x00-开篇\"><a class=\"anchor\" href=\"#0x00-开篇\">#</a> 0x00 开篇</h1>\n<ul>\n<li><span class=\"kbd\">勉励语 - 精勤求学，敦笃励志</span></li>\n</ul>\n<h1 id=\"0x01-基础知识\"><a class=\"anchor\" href=\"#0x01-基础知识\">#</a> 0x01 基础知识</h1>\n<ol>\n<li>漏洞挖掘\n<ul>\n<li>安全性漏洞往往不会对软件本身功能造成很大影响，因此很难被 QA 工程师的功能性测试发现，对于进行 “正常操作” 的普通用户来说，更难体会到软件中的这类逻辑瑕疵。</li>\n<li>从技术角度讲，所谓的漏洞挖掘更像是高级的 QA，一群精通二进制、汇编语言和操作系统底层知识的大手子没日没夜、精力旺盛的测试产品，寻找产品中的漏洞，敏锐的捕捉到程序中那些微笑细微的错误。大型的软件企业也会雇用一些安全专家来测试自己产品中的漏洞，这种测试工作可称 - Penetration test（攻击测试）；这些测试团队则被称做 Tiger team 或者 Ethic hacker。</li>\n<li>工程界 - 普遍采用的方式是 Fuzz，实际是一种灰盒测试；学术界 - 侧重教导，一般采用静态分析。</li>\n</ul>\n</li>\n<li>漏洞分析\n<ul>\n<li>分析漏洞时，如果能搜索到 POC 代码，就能重现漏洞现场；如果不能获得 POC，比较通用的方法是采用补丁比较器，比较 Patch 前后的可执行程序修改了哪些地方，然后再重点分析。</li>\n</ul>\n</li>\n<li>漏洞利用\n<ul>\n<li>针对发现的漏洞，可部署相应的攻击代码测试代码，进行提权等操作。</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"0x02-常用短语\"><a class=\"anchor\" href=\"#0x02-常用短语\">#</a> 0x02 常用短语</h1>\n<ol>\n<li>何为<span class=\"kbd\"> 0DAY</span> - 零日漏洞\n<ul>\n<li>未被公布，未被修复的漏洞。依次类推补丁刚刚发布的一段时间内，并非所有用户都能及时修复，故这种新公布的漏洞也有一定利用价值。有时把攻击这种刚刚被 patch 过的漏洞称为 1 day 攻击。（patch 发布后 1 天，叫做 1 day，5 天叫做 5 day，未发 patch 统称 0 day）</li>\n</ul>\n</li>\n<li>何为<span class=\"kbd\"> CVE</span>-<span class=\"exturl\" data-url=\"aHR0cDovL2N2ZS5taXRyZS5vcmcv\"> http://cve.mitre.org/</span>\n<ul>\n<li>英文全称是 “Common Vulnerabilities &amp; Exposures” 通用漏洞披露。CVE 就好像是一个字典表，为广泛认同的信息安全漏洞或者已经暴露出来的弱点给出一个公共的名称。</li>\n</ul>\n</li>\n<li>何为<span class=\"kbd\"> POC</span>\n<ul>\n<li>全称 'Proof of Concept'，中文概念验证，常指一段漏洞证明的代码。</li>\n</ul>\n</li>\n<li>何为<span class=\"kbd\"> EXP</span>\n<ul>\n<li>全称 'Exploit'，中文 ' 利用 '，指利用系统漏洞进行攻击的动作。</li>\n</ul>\n</li>\n<li>何为<span class=\"kbd\"> PayLoad</span>\n<ul>\n<li>中文 ' 有效载荷 '，指成功 exploit 之后真正在目标系统执行的代码或指令。</li>\n</ul>\n</li>\n<li>何为<span class=\"kbd\"> ShellCode</span>\n<ul>\n<li>简单翻译 'Shell 代码 '，是 Payload 的一种，由于其建立正向 / 反向 shell 而得名。</li>\n</ul>\n</li>\n</ol>\n",
            "tags": [
                "二进制",
                "0day安全"
            ]
        },
        {
            "id": "https://z-sy.github.io/2020/12/26/front-end-2020-12-26-front-introduce/",
            "url": "https://z-sy.github.io/2020/12/26/front-end-2020-12-26-front-introduce/",
            "title": "模块介绍",
            "date_published": "2020-12-26T10:18:22.000Z",
            "content_html": "<h1 id=\"0x00-开篇\"><a class=\"anchor\" href=\"#0x00-开篇\">#</a> 0x00 开篇</h1>\n<p>本模块主要梳理总结学习的前端相关知识</p>\n",
            "tags": [
                "前端"
            ]
        },
        {
            "id": "https://z-sy.github.io/2020/12/26/binary-2020-12-26-binary-introduce/",
            "url": "https://z-sy.github.io/2020/12/26/binary-2020-12-26-binary-introduce/",
            "title": "模块介绍",
            "date_published": "2020-12-26T10:18:21.000Z",
            "content_html": "<h1 id=\"0x00-开篇\"><a class=\"anchor\" href=\"#0x00-开篇\">#</a> 0x00 开篇</h1>\n<p>本模块主要梳理总结二进制知识体系，较为繁杂</p>\n",
            "tags": [
                "二进制"
            ]
        },
        {
            "id": "https://z-sy.github.io/2020/12/26/back-end-2020-12-26-back-introduce/",
            "url": "https://z-sy.github.io/2020/12/26/back-end-2020-12-26-back-introduce/",
            "title": "模块介绍",
            "date_published": "2020-12-26T10:18:20.000Z",
            "content_html": "<h1 id=\"0x00-开篇\"><a class=\"anchor\" href=\"#0x00-开篇\">#</a> 0x00 开篇</h1>\n<p>本模块主要梳理总结学习的后端相关知识</p>\n",
            "tags": [
                "后端"
            ]
        },
        {
            "id": "https://z-sy.github.io/2020/12/26/algorithm-2020-12-26-algorithm-introduce/",
            "url": "https://z-sy.github.io/2020/12/26/algorithm-2020-12-26-algorithm-introduce/",
            "title": "模块介绍",
            "date_published": "2020-12-26T10:18:19.000Z",
            "content_html": "<h1 id=\"0x00-开篇\"><a class=\"anchor\" href=\"#0x00-开篇\">#</a> 0x00 开篇</h1>\n<p>本模块主要梳理总结算法相关内容</p>\n",
            "tags": [
                "算法"
            ]
        },
        {
            "id": "https://z-sy.github.io/2020/12/26/FirstBlog/",
            "url": "https://z-sy.github.io/2020/12/26/FirstBlog/",
            "title": "关于本博客",
            "date_published": "2020-12-26T10:18:18.000Z",
            "content_html": "<h1 id=\"0x00-致谢\"><a class=\"anchor\" href=\"#0x00-致谢\">#</a> 0x00 致谢</h1>\n<ul>\n<li>首先，先感谢一下<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FtZWhpbWU=\"> amehime</span> 大佬的<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWUv\"> shoka 主题</span>吧，无意间了解到 hexo，后来点进了官网主题页面，访问了大佬的界面，一下子就被主题配色和音乐吸引住了，不能自拔❤️❤️❤️, 这满满的二次元调调，用美不胜收形容都不为过。推荐大家也去欣赏一下！</li>\n</ul>\n<h1 id=\"0x01-开篇\"><a class=\"anchor\" href=\"#0x01-开篇\">#</a> 0x01 开篇</h1>\n<ul>\n<li>嗯。。。也不算是第一篇博文吧。但是距离之前写的博文已经很久远了，且这回是第一次接触 hexo 来书写博客，所以一切都从头算好了！哈哈哈哈</li>\n</ul>\n<h1 id=\"0x02-关于捡回书写博客习惯的原因\"><a class=\"anchor\" href=\"#0x02-关于捡回书写博客习惯的原因\">#</a> 0x02 关于捡回书写博客习惯的原因</h1>\n<div class=\"note warning\">\n<p>警告：前方回忆杀预警💥💥💥</p>\n</div>\n<ul>\n<li>大学的时候，时间很多。对于计算机的兴趣非常大，每日除了课堂学的，回寝后自己也会瞎折腾好多东西，本地机子也好，VPS 也罢，都尝试了很多东西，但是说实话，很失败啊，随着时间的流逝，真正留下来的东西很少，无非是自己再听到这些东西的时候，脑子里有了个印象 -“啊，这个东西啊。我搞过；哎，也就那样，维护起来也怪累的”。</li>\n<li>搭过传奇的服务器，脚本里魔改了很多东西，过分到什么程度呢，一刀 999999 在我这都算是垃圾武器打出的暴击，哈哈哈哈哈。身为管理员，更是利用上帝特权各种给自己开后门😎（PS；学生党，没钱推广，而且只是本地起服务瞎折腾试试，所以别说我私服违规啥的🤣）；</li>\n<li>维护过 discuzz 论坛，论坛一般更新一些每月新番动漫，这个是租的 VPS，最便宜的打折搞活动那种🤧，速度是真的垃圾，偶尔高峰时段经常断联，而且访问速度感人。说实话，一个人的精力很有限，刚开始每天都会更新，打一些安全补丁啥的，但是越来越懒（可能也是访问量没啥起色吧，再加上便宜 VPS，也不咋心疼），后面估计是太久没更新，网站都让人脱库了，索性直接删了，服务器只当个跳板（看看外面，保持知识更新）用，用来看看油管，收集下载一些好玩的工具站啥的</li>\n<li>搭过 WordPress，这就是我最开始用的 CMS，那个时候是刚刚毕业工作吧，我一个北方汉子来到了广东这个陌生的城市，周末日常颓废时（这里说一下，陌生城市，人生地不熟，整个人的状态很容易变得很奇怪，我有段时间感觉经常一个人翻着知识站突然开始对着电脑神游发呆，不知道是刚毕业的迷茫还是一个人太久了，经常就开始神游太虚了，哈哈哈哈哈哈）就想，不如把工作生活中好多自己觉得好玩有趣的东西记录一下。这里说一下，Wordpress 确实对新手很友好，几乎全程是傻瓜式建站，基本不用做什么特别操作。倒是我自己，配置 LAMP 环境的时候，全部都从头自己搞了一遍，哇，第一次的时候是真滴酸爽，用了好长时间才跑起了服务，搭的时候就在想为啥没人写个 bash 脚本啥的呢，执行一次就完事得了。后来我才知道有宝塔这种神器（哭唧唧😱）一键配置脚本，当然，从头搞也不是没有好处，毕竟你自己对整个的流程就有了个大体的认识了。后面由于工作经常出差加懒癌晚期，遂又一次不了了之了</li>\n<li>视频解析站，这个没啥东西。接口都是网上搜的，我只是做了个整合，给我这种经济严重紧张的群体提供个方便罢了，后来发现自己搜的好多接口都不太稳定，而且有的接口各种广告，很影响心情，都不如直接度娘搜来的舒服，所以</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">cd</span> /var/www/html</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">rm</span> -rf ./Vipparse</pre></td></tr></table></figure><p>一气呵成，丝毫不犹豫，哈哈哈哈哈哈哈</p>\n<ul>\n<li>后来工作一年基本也不怎么折腾这些东西了，基本就是看到哪个东西自己感觉好玩就搞一段时间，玩腻了就直接弃坑转下一个战场。现在对于熟悉什么语言啥的也没啥感觉了，基本就是哪个方便需要哪个就上哪个，语法忘记了就直接看书上网搜一下。当然，C 和 C++ 还是相对来说偏爱的，毕竟毕业的第一份工作是嵌入式的工作，很喜欢接近底层的东西（写到这下意识的摸了下头发，还好，看来我还是很菜不够强，目前不用担心🤣）。仔细想想从大学到工作，破解过外挂，写过 app，写过修改器，破解过水卡，调过 cve 漏洞，搭过钓鱼 wifi 等（写到这，我想说一句，web 方向根本不好学好伐，各种知识体系纷繁复杂，各种框架层出不穷，相比底层感觉知识爆炸多啊😱, 直到现在都感觉也没有感觉哪个东西特别熟悉）</li>\n<li>咳咳。。。cut，每天时间有限，回忆完毕，进入正题：\n<ol>\n<li>对于技术的热爱。这个还是自己在宿舍思考的时候总结的，自己好多东西撒网太广，各式各样知识点太细太杂了，经常像熊瞎子掰苞米一样，这段时间搞这个熟点了，过了一段时间就又生疏了。这样子刚开始觉得没问题，忘了就再在网络搜再找就好了，温习一次就好了，但这样日积月累，花费的时间代价是巨大的，随着年龄的增长，越来越得不偿失，不如像好多大佬那样，整理自己的知识体系，有句话说得好，好记性不如烂笔头，更何况咱还没有大佬们那些好记性，干脆就记下来以自己的方式走就好了。</li>\n<li>合抱之木，生于毫末；九层之台，起于垒土；千里之行，始于足下。这个社会发展很快，很浮躁，每个人都急于要成绩，但有些事情我认为必须要降速，尤其是打基础阶段，好多东西是需要沉淀的，我们总是看到别人做的东西多么好多么绚丽，却忽视人家背后的积累，这是短视的，再复杂的东西也是靠着基础的语法语句一步步搭起来的，所以，元知识是非常重要的。</li>\n<li>简洁唯美。目前更想要的是将自己学的知识做一个记录整理并和大家分享积累，类似一个公开笔记一样，Github Pages 早有耳闻，但直到有需求才开始细了解，就像一条线一样，Github Pages---&gt;hexo---&gt; 霜月大佬主题 ---&gt; 准备入坑</li>\n</ol>\n</li>\n</ul>\n<h1 id=\"0x03-总结\"><a class=\"anchor\" href=\"#0x03-总结\">#</a> 0x03 总结</h1>\n<ul>\n<li>总体来说就是这样吧，整理知识点，记录，和大家分享，和大家一起提升。<span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL3poLWNuLw==\">hexo</span> 的东西和霜月大佬的<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWUv\"> shoka 主题</span>还在熟悉中，好多东西一点点探索吧（😏新东西学起来总是有点激动呢😏）</li>\n</ul>\n<h1 id=\"0x04-目前站点问题\"><a class=\"anchor\" href=\"#0x04-目前站点问题\">#</a> 0x04 目前站点问题</h1>\n<ol>\n<li><s class=\"danger\">评论系统未调</s></li>\n</ol>\n<div class=\"note info\">\n<p>评论系统出于安全考虑，暂时不上，后续择机更新 - 2021/01/10</p>\n</div>\n<ol start=\"2\">\n<li>搜索功能未调（目前刚开始，基本用不到，先放放😌）</li>\n<li>图床使用霜月大佬的链接（请不要喷我，我真的是太爱大佬收集整理的这些照片了，更何况自己找图床又不稳定，不如就用大佬的吧，哪天大佬的要是挂了再考虑自己整理一份吧，哈哈哈哈哈）</li>\n<li>目前整体文字性东西太少，远远不够和各位大佬做友链的级别，今后开始努力书写吧，<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTQlQjklOEMlRTYlOEIlODkvMTAyMjk0MTg/ZnI9YWxhZGRpbg==\">乌拉</span>～～～～～</li>\n<li>各项配置有待熟悉，摸索中。。。</li>\n</ol>\n",
            "tags": []
        }
    ]
}