{
    "version": "https://jsonfeed.org/version/1",
    "title": "心無旁騖 斷而敢行",
    "subtitle": "君子如竹，當品性高潔；君心似水，當靜遠流深",
    "icon": "https://z-sy.github.io/images/favicon.ico",
    "description": "",
    "home_page_url": "https://Z-SY.github.io",
    "items": [
        {
            "id": "https://z-sy.github.io/2021/03/30/algorithm-2021-03-30-%E4%BA%8C%E5%8F%89%E6%A0%91/",
            "url": "https://z-sy.github.io/2021/03/30/algorithm-2021-03-30-%E4%BA%8C%E5%8F%89%E6%A0%91/",
            "title": "二叉树",
            "date_published": "2021-03-30T03:10:13.000Z",
            "content_html": "<h1 id=\"0x00-开篇\"><a class=\"anchor\" href=\"#0x00-开篇\">#</a> 0x00 开篇</h1>\n<ul>\n<li><span class=\"kbd\">勉励语 - 绳锯木断，水滴石穿</span></li>\n</ul>\n<h1 id=\"0x01-什么是二叉树\"><a class=\"anchor\" href=\"#0x01-什么是二叉树\">#</a> 0x01 什么是二叉树</h1>\n<ul>\n<li>首先，二叉树是树形结构的一个重要类型，一般来说，满足以下两个条件的树就是二叉树：\n<ol>\n<li>本身是有序树</li>\n<li>树中包含的各个节点的度不能超过 2，即只能是 0、1 或者 2</li>\n</ol>\n</li>\n<li>二叉树的递归定义为二叉树是一颗空树，或者是一棵由一个根节点和两棵互不相交的，分别称作根的左子树和右子树组成的非空树；左子树和右子树又同样都是二叉树</li>\n</ul>\n<h1 id=\"0x02-二叉树的基本形态\"><a class=\"anchor\" href=\"#0x02-二叉树的基本形态\">#</a> 0x02 二叉树的基本形态</h1>\n<ol>\n<li>空二叉树 - 什么都没有</li>\n<li>只有一个根节点的二叉树</li>\n<li>只有左子树</li>\n<li>只有右子树</li>\n<li>完全二叉树</li>\n</ol>\n<div class=\"note info\">\n<p>特殊类型：[满二叉树]- 如果一棵二叉树只有度为零的节点和度为二的节点，并且度为零的节点都在同一层上，则称这颗二叉树为满二叉树；[完全二叉树]- 如果二叉树中除去最后一层节点为满二叉树，且最后一层的节点一次从左到右分布，则此二叉树被称为完全二叉树</p>\n</div>\n<h1 id=\"0x03-二叉树的性质\"><a class=\"anchor\" href=\"#0x03-二叉树的性质\">#</a> 0x03 二叉树的性质</h1>\n<ol>\n<li>二叉树的第 i 层上至多有 2 的 (i-1) 次幂个节点</li>\n<li>深度为 h 的二叉树中至多含有 2 的 h 次幂减 1 个节点</li>\n<li>若在任意一颗二叉树中，有 n0 个叶子节点，有 n1 个度为 2 的节点，则必有 n0=n1+1</li>\n<li>具有 n 个节点的完全二叉树深为 log 以 2 为底，(x+1) 的对数 - 其中 x 表示不大于 n 的最大整数</li>\n<li>若对一颗有 n 个节点的完全二叉树进行顺序编号 i&gt;=1 &amp;&amp; i&lt;=n，那么对于 i (i&gt;=1) 的节点：\n<ol>\n<li>当 i=1 时，该节点为根，它无双亲节点</li>\n<li>当 i&gt;1 时，该节点的双亲节点的编号为 i/2</li>\n<li>若 2i&lt;=n，则有编号为 2i 的左节点，否则没有左节点</li>\n<li>若 2i+1&lt;=n，则有编号为 2i+1 的右节点，否则没有右节点</li>\n</ol>\n</li>\n</ol>\n<h1 id=\"0x04-二叉树的遍历\"><a class=\"anchor\" href=\"#0x04-二叉树的遍历\">#</a> 0x04 二叉树的遍历</h1>\n<ul>\n<li>遍历类型：\n<ol>\n<li>前序</li>\n<li>中序</li>\n<li>后序</li>\n</ol>\n</li>\n<li>一棵二叉树由根节点、左子树和右子树三部分组成，若规定 D、L、R 分别代表遍历根节点，遍历左子树，遍历右子树，则根据排列组合来看，二叉树的遍历方式有 6 种情况：DLR、DRL、LDR、LRD、RDL、RLD。从算法实现上来看，先遍历左子树与先遍历右子树并没有什么本质区别，所以，只需要讨论三种方式即可：\n<ol>\n<li>DLR - 前序遍历 - 根在前，从左往右，一棵树的根永远在左子树前面，左子树又永远在右子树前面</li>\n<li>LDR - 中序遍历 - 根在中，从左往右，一棵树的左子树永远在根前面，根永远在右子树前面</li>\n<li>LRD - 后序遍历 - 根在后，从左往右，一棵树的左子树永远在右子树前面，右子树永远在根前面</li>\n</ol>\n</li>\n</ul>\n<h1 id=\"0x05-注意\"><a class=\"anchor\" href=\"#0x05-注意\">#</a> 0x05 注意</h1>\n<ul>\n<li>根是相对的，对于整棵树而言只有一个根，但对于每棵子树而言，又有自己的根。比如对于下面三个图，对于整棵树而言，A 是根，A 分别在最前面、中间、后面被遍历到。而对于 D，它是 G 和 H 的根，对于 D、G、H 这棵小树而言遍历顺序分别是 DGH、GDH、GHD；对于 C，它是 E 和 F 的根，三种排序的顺序分别为： CEF、ECF、EFC，可以说和 DLR、LDR、LRD 一模一样<br />\n<img data-src=\"https://haoqchen.site/img/in_post/go_through_binary_tree/pre.png\" alt=\"前序遍历图\" title=\"前序遍历-图片来自白夜行的狼博主\" /><br />\n<img data-src=\"https://haoqchen.site/img/in_post/go_through_binary_tree/mid.png\" alt=\"中序遍历图\" title=\"中序遍历-图片来自白夜行的狼博主\" /><br />\n<img data-src=\"https://haoqchen.site/img/in_post/go_through_binary_tree/back.png\" alt=\"后续遍历图\" title=\"后续遍历-图片来自白夜行的狼博主\" /></li>\n</ul>\n<h1 id=\"0x06-参考连接\"><a class=\"anchor\" href=\"#0x06-参考连接\">#</a> 0x06 参考连接</h1>\n<ol>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTQlQkElOEMlRTUlOEYlODklRTYlQTAlOTEvMTYwMjg3OT9mcj1hbGFkZGlu\">百度百科</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9oYW9xY2hlbi5zaXRlLzIwMTgvMDUvMjMvZ28tdGhyb3VnaC1iaW5hcnktdHJlZS8=\">白夜行的狼博主</span></li>\n</ol>\n",
            "tags": [
                "算法",
                "数据结构"
            ]
        },
        {
            "id": "https://z-sy.github.io/2021/03/28/algorithm-2021-03-28-%E6%A0%BC%E5%BC%8F%E5%8C%96%E4%BF%A1%E5%87%BD%E7%BC%96%E7%A8%8B/",
            "url": "https://z-sy.github.io/2021/03/28/algorithm-2021-03-28-%E6%A0%BC%E5%BC%8F%E5%8C%96%E4%BF%A1%E5%87%BD%E7%BC%96%E7%A8%8B/",
            "title": "格式化信函编程",
            "date_published": "2021-03-28T15:32:37.000Z",
            "content_html": "<h1 id=\"0x00-开篇\"><a class=\"anchor\" href=\"#0x00-开篇\">#</a> 0x00 开篇</h1>\n<ul>\n<li><span class=\"kbd\">勉励语 - 好学近乎知，力行近乎仁，知耻近乎勇</span></li>\n</ul>\n<h1 id=\"0x01-问题-格式较为固定的输出\"><a class=\"anchor\" href=\"#0x01-问题-格式较为固定的输出\">#</a> 0x01 问题 - 格式较为固定的输出</h1>\n<ul>\n<li>输入 - 可能是用户名等相关信息</li>\n<li>输出 - 格式化的一段模板标语</li>\n<li>约束 - 以较短且通用的代码完成</li>\n</ul>\n<h1 id=\"0x02-问题分析\"><a class=\"anchor\" href=\"#0x02-问题分析\">#</a> 0x02 问题分析</h1>\n<ul>\n<li>输出不管怎样都能完成，但是为了提高程序通用性及代码量的考量，此类程序最好是创建对应的格式化模板并且实现一个格式化模板解释器，从而达到一个解释器适配多个模板的实现，程序的通用性大大提高</li>\n</ul>\n<h1 id=\"0x03-实现方式\"><a class=\"anchor\" href=\"#0x03-实现方式\">#</a> 0x03 实现方式</h1>\n<ol>\n<li>分析输出的结构，创建对应的模板，并保存为 a.txt，例如：</li>\n</ol>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//Hello ， I am $0</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//I come from $1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//nice to meet you !</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>实现一个简单的模板解释器</li>\n</ol>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fstream></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    string testData<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"ysun\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"China\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 测试数据</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    ifstream <span class=\"token function\">file</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 读取程序模板</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    string str<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 暂时存储模板中的一行数据</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">getline</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">,</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 读入模板中的一行数据</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 一个 for 循环对读入的一行数据进行解析，除了模板中的变量全部原样输出</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token string\">'$'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token string\">'$'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                    cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"$\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">>=</span><span class=\"token string\">'0'</span><span class=\"token operator\">&amp;&amp;</span>str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;=</span><span class=\"token string\">'9'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                    cout<span class=\"token operator\">&lt;&lt;</span>testData<span class=\"token punctuation\">[</span>str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token string\">'0'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                    cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"error schema\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                cout<span class=\"token operator\">&lt;&lt;</span>str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        cout<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "算法",
                "编程珠玑"
            ]
        },
        {
            "id": "https://z-sy.github.io/2021/03/28/algorithm-2021-03-28-%E5%85%B3%E9%94%AE%E8%B7%AF%E5%BE%84/",
            "url": "https://z-sy.github.io/2021/03/28/algorithm-2021-03-28-%E5%85%B3%E9%94%AE%E8%B7%AF%E5%BE%84/",
            "title": "关键路径",
            "date_published": "2021-03-28T08:56:55.000Z",
            "content_html": "<h1 id=\"0x00-开篇\"><a class=\"anchor\" href=\"#0x00-开篇\">#</a> 0x00 开篇</h1>\n<ul>\n<li><span class=\"kbd\">勉励语 - 博学之，审问之，慎思之，明辨之，笃行之</span></li>\n</ul>\n<h1 id=\"0x01-什么是aov网\"><a class=\"anchor\" href=\"#0x01-什么是aov网\">#</a> 0x01 什么是 AOV 网</h1>\n<ul>\n<li>在一个表示工程的有向图中，用顶点表示活动，用弧表示活动之间的优先关系，这样的有向图为顶点表示活动的网，我们成为 AOV 网（Activity On Vertex Network）,AOV 网中的弧表示活动之间的某种约束关系。AOV 网中不存在回路（即无环的有向图）<br />\n<img data-src=\"https://img-blog.csdnimg.cn/20181207140814945.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5NjgxNzc3,size_16,color_FFFFFF,t_70\" alt=\"AOV_image\" title=\"图片来自CSDN-不吃鱼的猫748博主\" /></li>\n</ul>\n<h1 id=\"0x02-什么是aoe网\"><a class=\"anchor\" href=\"#0x02-什么是aoe网\">#</a> 0x02 什么是 AOE 网</h1>\n<ul>\n<li>在一个表示工程的带权有向图中，用顶点表示事件，用弧表示活动，用弧上的权值表示活动持续的时间，这种有向图的弧表示活动的网，我们称为 AOE 网（Activity On Edge Network）.AOE 网中没有入度的顶点称为始点或源点，没有出度的顶点叫做终点或汇点<br />\n<img data-src=\"https://img-blog.csdn.net/20131101084129453?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2FuZzM3OTI3NTYxNA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"AOE_image\" title=\"图片来自CSDN-lwtb博主\" /></li>\n</ul>\n<h1 id=\"0x03-aov网和aoe网的区别与联系\"><a class=\"anchor\" href=\"#0x03-aov网和aoe网的区别与联系\">#</a> 0x03 AOV 网和 AOE 网的区别与联系</h1>\n<ul>\n<li>AOV 网是顶点表示活动的网，它只描述了活动之间的约束关系，而 AOE 网是用有向边表示活动，边上的权值表示活动持续的时间。AOE 网是建立在 AOV 网基础之上（活动之间约束关系没有矛盾），再来分析完成整个工程至少需要多少时间，或者为缩短完成工程所需时间，应当加快哪些活动等问题。</li>\n<li>路径各个活动所持续的时间之和称为路径长度，从源点到汇点具有最大路径长度的路径叫做关键路径，在关键路径上的活动叫做关键活动</li>\n</ul>\n<h1 id=\"0x04-关键路径的几个参数\"><a class=\"anchor\" href=\"#0x04-关键路径的几个参数\">#</a> 0x04 关键路径的几个参数</h1>\n<ol>\n<li>事件的最早发生时间 etv（earliest time of vertex）: 即顶点 Vk 的最早发生时间</li>\n<li>事件的最晚发生时间 ltv (lastest time of vertex): 即顶点 Vk 的最晚发生时间。也就是每个顶点对应事件最晚需要开始的时间，超出此时间将会延误整个工程</li>\n<li>活动的最早开始时间 ete (earliset time of edge): 即弧 ak 的最早开始时间</li>\n<li>活动的最晚开始时间 lte (lastest time of edge): 即弧 ak 的最晚开始时间，也就是不推迟工期的最晚开始时间</li>\n</ol>\n<h1 id=\"0x05-怎么理解参数中的最早\"><a class=\"anchor\" href=\"#0x05-怎么理解参数中的最早\">#</a> 0x05 怎么理解参数中的最早</h1>\n<ul>\n<li>最早一般从始点开始推，对于里程碑事件，到达它的路径可能有多条，但是我们只会取其中最大的一条，只有满足了这最大的一条路径开销，其它的小开销路径就一定会满足；反之，如果我们没有选择最大的开销路径，那么假设里程碑①到里程碑③比里程碑②到里程碑③所花费的路径开销大，里程碑③依赖里程碑①和里程碑②，但是里程碑③满足了不是最大的路径开销就开始了，但是里程碑③所依赖的里程碑①却还没有完成，所以这是矛盾的。因此我们计算最早应选抵达一个里程碑所需的最大开销</li>\n</ul>\n<h1 id=\"0x06-怎么理解参数中的最晚\"><a class=\"anchor\" href=\"#0x06-怎么理解参数中的最晚\">#</a> 0x06 怎么理解参数中的最晚</h1>\n<ul>\n<li>最晚一般从终点逆向往回推，假设对于里程碑③，反推的里程碑可能有里程碑④或里程碑⑤，两者所需的路径开销不同，那么计算里程碑③的最晚应该是选择路径开销最小的，可以这么理解，不论是里程碑④还是里程碑⑤，二者的依赖均是要求里程碑③完成，它们两个里程碑事件才能开始，如果假设里程碑③的最晚没有满足最小的路径开销，就会出现，以里程碑③为依赖的最小路径开销里程碑提前开始了，但是它所依赖的里程碑③却还没有开始，所以这是矛盾的。因此我们计算最晚，应选择逆推的最小路径开销</li>\n</ul>\n<div class=\"note info\">\n<p>关键路径可能不止有一条</p>\n</div>\n<h1 id=\"0x07-计算方法\"><a class=\"anchor\" href=\"#0x07-计算方法\">#</a> 0x07 计算方法</h1>\n<ol>\n<li>计算出关键路径的四个参数，然后对于关键路径 Ve (i) = Vl (i) 的里程碑即为关键路径；对于 e (i) = l (i) 的活动即为关键活动</li>\n<li>计算 Ve (i)\n<ul>\n<li>从前往后，取大值 - 具体数值 = 直接前驱节点 Ve (i-1)+ 到达边的权值 (多个数值取最大值)</li>\n<li>对于起始节点，其 Ve (i) = 0</li>\n</ul>\n</li>\n<li>计算 Vl (i)\n<ul>\n<li>从后向前，取小值 - 具体数值 = 直接后继节点 Vl (i+1)- 发出边的权值 (多个数值取最小值)</li>\n</ul>\n</li>\n<li>计算 e (i)\n<ul>\n<li>若活动 k 是由里程碑 i 到里程碑 j 标识，则活动 k 的最早开始时间应该等于里程碑 Ve (i) 的最早发生时间即 e (k)=Ve (i) 即该活动的发出顶点的最早发生时间</li>\n</ul>\n</li>\n<li>计算 l (i)\n<ul>\n<li>若活动 k 是由里程碑 i 到里程碑 j 标识，则活动 K 的最晚开始时间应保证里程碑 j 的最晚发生时间不延后即 l (i)=Vl (j)-&lt;Vi,Vj &gt; 的权即里程碑 j 的最晚发生时间减去边的权值</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"0x08-参考连接\"><a class=\"anchor\" href=\"#0x08-参考连接\">#</a> 0x08 参考连接</h1>\n<ol>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2ODExMzkzL2FydGljbGUvZGV0YWlscy83NzgyMTk0NA==\">关键路径计算 - lwtb 博主</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMVc1NDExczdBVz9mcm9tPXNlYXJjaCZhbXA7c2VpZD0xMjczODA3MDA3NTg2Njc5MTMwNg==\">关键路径（AOE - 网）- 你这个阶段你睡得着觉 UP 主</span></li>\n</ol>\n",
            "tags": [
                "算法",
                "软考"
            ]
        },
        {
            "id": "https://z-sy.github.io/2021/03/15/penetration-test-2021-03-15-%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA/",
            "url": "https://z-sy.github.io/2021/03/15/penetration-test-2021-03-15-%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA/",
            "title": "缓冲区溢出",
            "date_published": "2021-03-15T02:48:46.000Z",
            "content_html": "<h1 id=\"0x00-开篇\"><a class=\"anchor\" href=\"#0x00-开篇\">#</a> 0x00 开篇</h1>\n<ul>\n<li><span class=\"kbd\">勉励语 - 太上有立德，其次有立功，其次有立言，虽久不废，此谓不朽</span></li>\n</ul>\n<h1 id=\"0x01-介绍\"><a class=\"anchor\" href=\"#0x01-介绍\">#</a> 0x01 介绍</h1>\n<ul>\n<li>在 CPU 执行指令时，数据与代码的边界模糊不清，当程序未对输入的变量进行效验时，超出变量长度的部分会淹没部分地址，当对超出的部分进行精心构造设计时，可以达到控制系统权限的目的</li>\n</ul>\n<h1 id=\"0x02-如何发现缓冲区溢出漏洞\"><a class=\"anchor\" href=\"#0x02-如何发现缓冲区溢出漏洞\">#</a> 0x02 如何发现缓冲区溢出漏洞</h1>\n<ol>\n<li>源码审计\n<ul>\n<li>难度较大，一般对于大公司有自己的安全测试团队，可能能拿到源码或者是安全测试团队接到相关工作任务，拿到部分源码，进行单元审计操作。</li>\n</ul>\n</li>\n<li>逆向工程\n<ul>\n<li>最常用，一般程序最终都会以二进制可执行文件发布，将文件进行反汇编分析调试，可摸清程序整体的流程和输入输出点，对安全人员水平要求较高。</li>\n</ul>\n</li>\n<li>模糊测试\n<ul>\n<li>向程序输入半随机数据，根据内存变化情况判断是否存在溢出点</li>\n<li>数据生成器：生成随机、半随机数据</li>\n<li>测试工具：识别溢出漏洞</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"0x03-实验条件\"><a class=\"anchor\" href=\"#0x03-实验条件\">#</a> 0x03 实验条件</h1>\n<ul>\n<li>软件：SLMail 5.5.0 Mail Server</li>\n<li>环境： XP SP3</li>\n<li>实验前提：根据漏洞报告，SLMail 程序存在的 PASS 即输入密码位置存在缓冲区溢出漏洞，无需身份验证可实现远程代码执行</li>\n<li>注意事项：\n<ul>\n<li>DEP - 数据执行保护，用来阻止从未被显式标记为可执行的内存页执行代码。</li>\n<li>ASLR - 地址空间布局随机化，一种针对缓冲区溢出的安全保护技术。从 Windows Vsita (内核版本 6.0) 开始采用，使我们的 PE 文件在每次载入内存时起始地址都会变得随机化，增加恶意用户编写漏洞利用代码的难度。</li>\n<li>坏字节查找 - 个别字节在程序中可能存在特殊含义，所以当输入中包含相应字节时，会被转义或者过滤，因此构造的 ShellCode 不应该含有坏字节，以免造成反弹 Shell 失效</li>\n<li>Shell 的连接方式 - 当反弹 Shell 时，应尽量利用被攻击设备连接本机特定端口，避免只开放相关端口等待连接，因为设备外围很可能存在安防等设备，其只开放特定端口，其它端口包会进行过滤，但是对于内部设备发出的访问包一般不会进行拦截。</li>\n</ul>\n</li>\n<li>测试手段：FUZZING，通过发送不同大小的测试数据，并观察 SLMail 程序在内存中的情况，判断溢出点。</li>\n<li>查找溢出位置的手段：\n<ol>\n<li>二分法 - 通过不断在溢出数据和未溢出数据之间进行切换并缩小范围，最终找到溢出位置，确定溢出字节</li>\n<li>唯一字节法 - 利用特定算法生成一串根据相关字节即可对应到唯一位置的特殊字符串，当发生溢出时，找到溢出位置，找到溢出字节，对应到字符串中。</li>\n</ol>\n</li>\n</ul>\n",
            "tags": [
                "渗透测试",
                "缓冲区溢出"
            ]
        },
        {
            "id": "https://z-sy.github.io/2021/02/28/front-end-2021-02-28-ECharts%E7%9B%B8%E5%85%B3-02/",
            "url": "https://z-sy.github.io/2021/02/28/front-end-2021-02-28-ECharts%E7%9B%B8%E5%85%B3-02/",
            "title": "ECharts相关-02",
            "date_published": "2021-02-28T12:51:27.000Z",
            "content_html": "<h1 id=\"0x00-开篇\"><a class=\"anchor\" href=\"#0x00-开篇\">#</a> 0x00 开篇</h1>\n<ul>\n<li><span class=\"kbd\">勉励语 - 古之立大事者，不惟有超世之才，亦必有坚忍不拔之志</span></li>\n</ul>\n<h1 id=\"0x01-echarts-5-新特性\"><a class=\"anchor\" href=\"#0x01-echarts-5-新特性\">#</a> 0x01 ECharts 5 新特性</h1>\n<ul>\n<li>数据可视化在过去的几年中得到了长足的发展。开发者对于可视化产品的期待不再是简单的图表创建工具，而在交互、性能、数据处理等方面有了更高级的需求。</li>\n<li>Apache ECharts 始终致力于让开发者以更方便的方式创造灵活丰富的可视化作品。在最新推出的 Apache ECharts 5，着力加强了图表的叙事能力，让开发者可以以更简单的方式，讲述数据背后的故事。</li>\n</ul>\n<ol>\n<li>动态叙事\n<ul>\n<li>动态排序图\n<ul>\n<li>动画对于人类认知的重要性不言而喻。在之前的作品中，会通过初始化动画和过渡动画帮助用户理解数据变换之间的联系，让图表的出现和变换显得不那么生硬。这次，更是大幅度增强了我们的动画叙事能力，。希望能够进一步发挥动画对于用户认知的帮助作用，借助图表的动态叙事功能，帮助用户更容易理解图表背后表达的故事。</li>\n<li>Apache ECharts 5 新增支持动态排序柱状图（bar-racing）以及动态排序折线图（line-racing），帮助开发者方便地创建带有时序性的图表，展现数据随着时间维度上的变化，讲述数据的演变过程。</li>\n<li>动态排序图展现了不同的类目随着时间在排名上的衍变。而开发者只需要通过几行简单的配置项就可以在 ECharts 中开启这样的效果。</li>\n</ul>\n</li>\n<li>自定义系列动画\n<ul>\n<li>除了动态排序图，Apache ECharts 5 在自定义系列中提供了更加丰富强大的动画效果，支持标签数值文本的插值动画，图形的形变（morph）、分裂（separate）、合并（combine）等效果的过渡动画。</li>\n<li>想象一下，用这些动态效果，你可以创造出多么令人称奇的可视化作品！</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>视觉设计\n<ul>\n<li>视觉设计的作用并不仅仅是为了让图表更好看，更重要的是，符合可视化原理的设计可以帮用户更快速地理解图表想表达的内容，并且尽可能消除不良设计带来的误解。</li>\n<li>默认设计\n<ul>\n<li>官方发现，有很大一部分开发者使用了 ECharts 默认的主题样式，因而设计优雅、符合可视化原理的默认主题设计是非常重要的。在 Apache ECharts 5 中，我们重新设计了默认的主题样式，针对不同的系列和组件分别做了优化调整。以主题色为例，我们考量了颜色之间的区分度、与背景色的对比度、相邻颜色的和谐度等因素，并且确保色觉辨识障碍人士也能清楚地区分数据。</li>\n</ul>\n</li>\n<li>标签\n<ul>\n<li>标签是图表中的核心元素之一，清晰而明确的标签可以帮助用户对数据有更准确的理解。Apache ECharts 5 提供了多种新的标签功能，让密集的标签能清晰显示、准确表意。</li>\n<li>Apache ECharts 5 可以通过一个配置项开启自动隐藏重叠的标签。对于超出显示区域的标签，可以选择自动截断或者换行。密集的饼图标签，现在有了更美观的自动排布。</li>\n<li>这些功能可以帮助避免文字过于密集影响可读性。并且，无需开发者编写额外的代码就能默认生效，大大简化了开发者的开发成本。</li>\n<li>我们也提供了多个配置项来让开发者主动控制标签的布局策略，例如标签拖动、整体显示在画布边缘，用引导线和图形元素连接，并且仍可联动高亮表达关联关系。</li>\n</ul>\n</li>\n<li>时间轴\n<ul>\n<li>Apache ECharts 5 带来了适于表达时间标签刻度的时间轴。时间轴的默认设计更突出重要的信息，并且提供了更灵活的定制化能力，让开发者根据不同的需求定制时间轴的标签内容。首先，时间轴不再如之前般绝对平均分割，而是选取年、月、日、整点这类更有意义的点来展示，并且能同时显示不同层级的刻度。标签的 formatter 支持了时间模版（例如 {yyyy}-{MM}-{dd}），并且可以为不同时间粒度的标签指定不同的 formatter，结合已有的富文本标签，可以定制出醒目而多样的时间效果。</li>\n</ul>\n</li>\n<li>提示框\n<ul>\n<li>提示框（Tooltip）是一种最常用的可视化组件，可以帮助用户交互式地了解数据的详细信息。在 Apache ECharts 5 中，我们对提示框的样式进行了优化，通过对字体样式，颜色的调整，指向图形的箭头，跟随图形颜色的边框色等功能，让提示框的默认展示优雅又清晰。并且改进了富文本的渲染逻辑，确保显示效果与 HTML 方式一致，让用户在不同场景下可以选择不同的技术方案实现同样的效果。</li>\n<li>除此之外，官方这次也加上了提示框内的列表按照数值大小或者类目顺序排序的功能。</li>\n</ul>\n</li>\n<li>仪表盘\n<ul>\n<li>我们看到社区用户创建了很多酷炫的仪表盘图表，但是他们的配置方式往往比较复杂而取巧。因此，我们对仪表盘的功能作了全面升级，支持了图片或者矢量路径绘制指针、也支持了锚点（anchor）配置项、进度条（progress）、圆角效果等等配置项。</li>\n</ul>\n</li>\n<li>扇形圆角\n<ul>\n<li>圆角可以带来更美观而柔和的视觉，也能够赋予更多的创造力。Apache ECharts 5 支持了饼图、旭日图、矩形树图的扇形圆角。可不要小看了简单的圆角配置项，合理地搭配其他的效果，就可以形成更具个性的的可视化作品。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>交互能力\n<ul>\n<li>可视化作品的交互能力帮助用户探索了解作品，加深对于图表主旨的理解。</li>\n<li>状态管理\n<ul>\n<li>在 ECharts 4 中有高亮（emphasis）和普通（normal）两个交互的状态，在鼠标移到图形上的时候会进</li>\n<li>入高亮状态以区分该数据，开发者可以分别设置这两个状态的颜色，阴影等样式。这次在 Apache ECharts 5 中，我们在原先的鼠标 hover 高亮的基础上，新增加了淡出其它非相关元素的效果，从而可以达到聚焦目标数据的目的。</li>\n<li>在关系图，树图，旭日图，桑基等更复杂数据结构的图上，也可以通过淡出非相关元素来观察数据之间的联系。而且颜色，阴影等在高亮（emphasis）中可以设置的样式，现在也可以在淡出（blur）状态中设置了。</li>\n<li>除此之外，我们为所有系列还添加了点击选中这个之前只有在饼图、地图等少数系列中才能开启的交互，开发者可以设置为单选或多选模式，并且通过监听 selectchanged 事件获取到选中的所有图形然后进行更进一步的处理。与高亮和淡出一样，选中的样式也可以在 select 中配置。</li>\n</ul>\n</li>\n<li>性能提升\n<ul>\n<li>脏矩形渲染\n<ul>\n<li>Apache ECharts 5 新支持了脏矩形渲染，解决只有局部变化的场景下的性能瓶颈。在使用 Canvas 渲染器时，脏矩形渲染技术探测并只更新视图变化的部分，而不是任何变动都引起画布完全重绘。这能在一些特殊场景下帮助提高渲染帧率，例如在图形很多时候，鼠标频繁触发一些图形高亮的场景。以往这类场景，会使用额外的 Canvas 层以优化性能，但是这种方式不是所有场景都通用，而且对于复杂的样式的效果并不理想。脏矩形渲染很好地同时满足了性能和显示正确。</li>\n</ul>\n</li>\n<li>实时时序数据的折线图性能优化\n<ul>\n<li>除此之外，海量数据下折线图的性能也有了大幅度的性能提升。我们经常碰到大量的实时时序数据的高性能绘制的需求，这些数据可能需要几百或者几十毫秒更新一次。</li>\n<li>Apache ECharts 5 对这些场景下的 CPU 消耗、内存占用、初始化时间都进行了深度的优化，使得百万量级的数据也能做到实时的更新（每次更新耗时少于 30ms），甚至对于千万级的数据，也可以在 1s 内渲染完，并且保持很小的内存占用以及流畅的提示框（tooltip）等交互。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>开发体验\n<ul>\n<li>我们希望如此强大的可视化工具可以被更多开发者以更简单的方式使用，因而开发者的开发体验也是我们非常关注的方面。</li>\n<li>数据集\n<ul>\n<li>ECharts 5 加强了数据集的数据转换能力，让开发者可以使用简单的方式实现常用的数据处理，如：数据过滤（filter）、排序（sort）、聚合（aggregate）、直方图（histogram）、简单聚类（clustering）、回归线计算（regression）等。开发者可以用统一的声明式方式来使用这些功能，可以方便地实现常用的数据操作。</li>\n</ul>\n</li>\n<li>国际化\n<ul>\n<li>ECharts 原有的国际化方案，采用的是根据不同的语言参数打包出不同的部署文件的形式。​这种方式，使动态的语言和静态的代码包绑定在一起，使用的时候只能通过重新加载不同语言版本的 ECharts 代码来达到切换语言的目的。</li>\n<li>因此，从 Apache ECharts 5 开始，动态的语言包和静态的代码包分离开。切换语言的时候，只需要加载相应语言包​，通过类似挂载主题的方式，使用 registerLocale 函数挂载语言包对象​，重新初始化后就完成了语言的切换​。</li>\n</ul>\n</li>\n<li>TypeScript 重构\n<ul>\n<li>在近 8 年的时间里，Apache ECharts 已经发展成一个非常复杂的可视化库了，为了续可以更安全高效的进行重构和新功能的开发，我们在 Apache ECharts 5 的开发之初，使用 TypeScript 对代码进行了重写，TypeScript 所带来的强类型让我们更有信心地在 ECharts 5 开发的时候对代码进行大刀阔斧的重构以实现更多令人激动人心的特性。</li>\n<li>对于开发者，我们也可以从 TypeScript 代码直接生成更好更符合代码的 DTS 类型描述文件。在此之前，ECharts 的类型描述文件一直是由社区开发者帮我们维护并发布到 DefinityTyped，这个有着不小的工作量，非常感谢大家的贡献。</li>\n<li>除此之外，如果开发者的组件是按需引入的，我们还提供了一个 ComposeOption 类型方法，可以组合出一个只包含了引入组件的配置项类型，可以带来更严格的类型检查，帮助你提前检测到未引入的组件类型。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>可访问性\n<ul>\n<li>Apache ECharts 一直非常重视无障碍设计，我们希望让视觉障碍人士也能平等了解图表传递的信息。并且也希望图表的开发者能以极低的开发成本实现这一点，因而有利于让开发者更愿意为视觉障碍人士提供支持。</li>\n<li>在上一个大版本中，我们支持了根据不同的图表类型和数据自动一键智能生成图表描述的功能，帮助开发者非常方便地支持图表的 DOM 描述信息。在 ECharts 5 中，我们也做了更多提高可访问性的设计，帮助视觉障碍人士更好地理解图表内容。</li>\n<li>主题配色\n<ul>\n<li>我们在设计新版默认主题样式的时候，将无障碍设计作为一个重要的考量依据，对颜色的明度和色值都进行反复测试，帮助视觉辨识障碍用户清楚地识别图表数据。​</li>\n<li>并且，针对有更进一步无障碍需求的开发者，我们还提供了特殊的高对比度主题，以更高对比度颜色的主题将数据作进一步区分。</li>\n</ul>\n</li>\n<li>贴画图案\n<ul>\n<li>ECharts 5 还新增提供了贴花的功能，用图案辅助颜色表达，进一步帮助用户区分数据。</li>\n<li>此外，贴花图案还能在一些其他的场景下提供帮助，比如：在报纸、书籍之类只有单色或者非常少的颜色的印刷品中，帮助更好地区分数据；用图形元素方便用户对数据产生更直观的理解等。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>小结\n<ul>\n<li>除了以上介绍的功能，Apache ECharts 还在非常多的细节中做了改进，帮助开发者更轻松地创建默认好用、配置灵活的图表，用图表讲述数据背后的故事。</li>\n<li>感谢所有使用过 ECharts，甚至参与过社区贡献的开发者，正是你们才使得 Apache ECharts 5 成为可能。我们会以更大的热情投入到未来的开发中，Apache ECharts 也会以更大的诚意和大家在 6 相见！</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"0x02-补充连接\"><a class=\"anchor\" href=\"#0x02-补充连接\">#</a> 0x02 补充连接</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9lY2hhcnRzLmFwYWNoZS5vcmcvemgvdHV0b3JpYWwuaHRtbA==\">文章摘录地址 - ECharts 官方教程</span></p>\n",
            "tags": [
                "前端",
                "ECHarts"
            ]
        },
        {
            "id": "https://z-sy.github.io/2021/02/27/front-end-2021-02-27-ECharts%E7%9B%B8%E5%85%B3-01/",
            "url": "https://z-sy.github.io/2021/02/27/front-end-2021-02-27-ECharts%E7%9B%B8%E5%85%B3-01/",
            "title": "ECharts相关-01",
            "date_published": "2021-02-27T13:12:55.000Z",
            "content_html": "<h1 id=\"0x00-开篇\"><a class=\"anchor\" href=\"#0x00-开篇\">#</a> 0x00 开篇</h1>\n<ul>\n<li><span class=\"kbd\">勉励语 - 心思澄澈，安定有力，摒除诱惑，才可成就大事业</span></li>\n</ul>\n<h1 id=\"0x01-echarts简介\"><a class=\"anchor\" href=\"#0x01-echarts简介\">#</a> 0x01 ECharts 简介</h1>\n<ul>\n<li>ECharts，一个使用 JavaScript 实现的开源可视化库，可以流畅的运行在 PC 和移动设备上，兼容当前绝大部分浏览器（IE8/9/10/11，Chrome，Firefox，Safari 等），底层依赖轻量级的矢量图形库<span class=\"exturl\" data-url=\"aHR0cHM6Ly9lY29tZmUuZ2l0aHViLmlvL3pyZW5kZXItZG9jL3B1YmxpYy8=\"> ZRenders</span>，提供直观，交互丰富，可高度个性化定制的数据可视化图表。</li>\n<li>ECharts 提供了常规的折线图、柱状图、散点图、饼图、K 线图，用于统计的盒形图，用于地理数据可视化的地图、热力图、线图，用于关系数据可视化的关系图、旭日图，多维数据可视化的平行坐标，还有用于 BI 的漏斗图，仪表盘，并且支持图与图之间的混搭。</li>\n<li>2018 年 3 月全球著名开源社区 Apache 宣布百度 ECharts 进入 Apache 孵化器。</li>\n</ul>\n<h1 id=\"0x02-提供的图示类型\"><a class=\"anchor\" href=\"#0x02-提供的图示类型\">#</a> 0x02 提供的图示类型</h1>\n<ul>\n<li>折线图</li>\n<li>柱状图</li>\n<li>散点图饼图</li>\n<li>K 线图</li>\n<li>用于统计的盒形图</li>\n<li>用于地理数据可视化的地图</li>\n<li>热力图</li>\n<li>线图</li>\n<li>用于关系数据可视化的关系图、treemap、旭日图</li>\n<li>多维数据可视化的平行坐标</li>\n<li>用于 BI 的漏斗图，仪表盘</li>\n<li>除了已经内置的包含了丰富功能的图表，ECharts 还提供了自定义系列，只需要传入一个 renderItem 函数，就可以从数据映射到任何你想要的图形，更棒的是这些都还能和已有的交互组件结合使用而不需要操心其它事情</li>\n</ul>\n<div class=\"note info\">\n<p>支持图与图之间的混搭</p>\n</div>\n<h1 id=\"0x03-使用方式简介\"><a class=\"anchor\" href=\"#0x03-使用方式简介\">#</a> 0x03 使用方式简介</h1>\n<ol>\n<li>引入 ECHarts.js 文件，导入相关方法。<span class=\"exturl\" data-url=\"aHR0cHM6Ly9lY2hhcnRzLmFwYWNoZS5vcmcvemgvZG93bmxvYWQuaHRtbA==\">下载地址 - ECharts.js</span></li>\n</ol>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>utf-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 引入 ECharts 文件 --></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>echarts.min.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><ol start=\"2\">\n<li>Html 文件中创建对应 dom 节点，官网解释为创建 dom 容器，一个意思。如下：</li>\n</ol>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 为 ECharts 准备一个具备大小（宽高）的 DOM --></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>main<span class=\"token punctuation\">\"</span></span><span class=\"token style-attr language-css\"><span class=\"token attr-name\"> <span class=\"token attr-name\">style</span></span><span class=\"token punctuation\">=\"</span><span class=\"token attr-value\"><span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 600px<span class=\"token punctuation\">;</span><span class=\"token property\">height</span><span class=\"token punctuation\">:</span>400px<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><ol start=\"3\">\n<li>由于示例代码，JS 直接页面写入。本例中创建的图表为柱状图，首先调用 ECharts 的 echarts.init 函数初始化 dom 节点</li>\n</ol>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>utf-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>ECharts<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 引入 echarts.js --></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>echarts.min.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 为 ECharts 准备一个具备大小（宽高）的 Dom --></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>main<span class=\"token punctuation\">\"</span></span><span class=\"token style-attr language-css\"><span class=\"token attr-name\"> <span class=\"token attr-name\">style</span></span><span class=\"token punctuation\">=\"</span><span class=\"token attr-value\"><span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 600px<span class=\"token punctuation\">;</span><span class=\"token property\">height</span><span class=\"token punctuation\">:</span>400px<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/javascript<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// 基于准备好的 dom，初始化 echarts 实例</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">var</span> myChart <span class=\"token operator\">=</span> echarts<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'main'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><ol start=\"4\">\n<li>设置图表的配置项和相关数据</li>\n</ol>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>utf-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>ECharts<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 引入 echarts.js --></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>echarts.min.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 为 ECharts 准备一个具备大小（宽高）的 Dom --></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>main<span class=\"token punctuation\">\"</span></span><span class=\"token style-attr language-css\"><span class=\"token attr-name\"> <span class=\"token attr-name\">style</span></span><span class=\"token punctuation\">=\"</span><span class=\"token attr-value\"><span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 600px<span class=\"token punctuation\">;</span><span class=\"token property\">height</span><span class=\"token punctuation\">:</span>400px<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/javascript<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// 基于准备好的 dom，初始化 echarts 实例</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">var</span> myChart <span class=\"token operator\">=</span> echarts<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'main'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 指定图表的配置项和数据</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">var</span> option <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            title<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                text<span class=\"token operator\">:</span> <span class=\"token string\">'ECharts 入门示例'</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            tooltip<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            legend<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                data<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span><span class=\"token string\">'销量'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            xAxis<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                data<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"衬衫\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"羊毛衫\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"雪纺衫\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"裤子\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"高跟鞋\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"袜子\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            yAxis<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            series<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                name<span class=\"token operator\">:</span> <span class=\"token string\">'销量'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                type<span class=\"token operator\">:</span> <span class=\"token string\">'bar'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                data<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">36</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><ol start=\"5\">\n<li>调用 ECharts 的 setOption 函数，传入刚才的 option 设置，将图表渲染进 dom 节点，查看效果</li>\n</ol>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>utf-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>ECharts<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 引入 echarts.js --></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>echarts.min.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 为 ECharts 准备一个具备大小（宽高）的 Dom --></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>main<span class=\"token punctuation\">\"</span></span><span class=\"token style-attr language-css\"><span class=\"token attr-name\"> <span class=\"token attr-name\">style</span></span><span class=\"token punctuation\">=\"</span><span class=\"token attr-value\"><span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 600px<span class=\"token punctuation\">;</span><span class=\"token property\">height</span><span class=\"token punctuation\">:</span>400px<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/javascript<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// 基于准备好的 dom，初始化 echarts 实例</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">var</span> myChart <span class=\"token operator\">=</span> echarts<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'main'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 指定图表的配置项和数据</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">var</span> option <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            title<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                text<span class=\"token operator\">:</span> <span class=\"token string\">'ECharts 入门示例'</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            tooltip<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            legend<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                data<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span><span class=\"token string\">'销量'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            xAxis<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                data<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"衬衫\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"羊毛衫\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"雪纺衫\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"裤子\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"高跟鞋\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"袜子\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            yAxis<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            series<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                name<span class=\"token operator\">:</span> <span class=\"token string\">'销量'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                type<span class=\"token operator\">:</span> <span class=\"token string\">'bar'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                data<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">36</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token comment\">// 使用刚指定的配置项和数据显示图表。</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        myChart<span class=\"token punctuation\">.</span><span class=\"token function\">setOption</span><span class=\"token punctuation\">(</span>option<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><div class=\"note info\">\n<p>ECharts 很早就接触过，根据可视化大屏模板自己画了一些东西，实践了一下，但是工作原因，一直没抽空总结，最近又正好用到，简直天助老夫！吼吼哈哈，正好借着机会记录一波，这么漂亮优秀的图形库投多少时间学习都不为过，当然，往深了学后续可以考虑 D3.js 自己画，如果有数学专业的小伙伴怕不是手到擒来了😎😎。总体来说，ECharts 的使用上手门槛极低，模块化堪称完美，接口清晰明确，文档通俗易懂，社区活跃。可以说是开箱即用，对于各个参数的设置及调整建议详细阅读官网文档，几乎每一个参数都有说明，在这里真心谢谢百度各位大佬工程师及 Github 上贡献的小伙伴的这个轮子作品，将前端可视化门槛降了一个维度，尤其是官网的文档，简直清晰到让人心疼，得用了多少时间才码的这么详细😜😜</p>\n</div>\n<h1 id=\"0x04-补充连接\"><a class=\"anchor\" href=\"#0x04-补充连接\">#</a> 0x04 补充连接</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9lY2hhcnRzLmFwYWNoZS5vcmcvemgvaW5kZXguaHRtbA==\">Apache Echarts 官网</span></p>\n",
            "tags": [
                "前端",
                "ECHarts"
            ]
        },
        {
            "id": "https://z-sy.github.io/2021/01/24/binary-2021-01-24-0day%E5%AE%89%E5%85%A8%E6%B8%A9%E4%B9%A0-06/",
            "url": "https://z-sy.github.io/2021/01/24/binary-2021-01-24-0day%E5%AE%89%E5%85%A8%E6%B8%A9%E4%B9%A0-06/",
            "title": "0day安全温习-06",
            "date_published": "2021-01-24T10:15:34.000Z",
            "content_html": "<h1 id=\"0x00-开篇\"><a class=\"anchor\" href=\"#0x00-开篇\">#</a> 0x00 开篇</h1>\n<ul>\n<li><span class=\"kbd\">勉励语 - 两句三年得，一吟双泪流</span></li>\n</ul>\n<h1 id=\"0x01-shellcode\"><a class=\"anchor\" href=\"#0x01-shellcode\">#</a> 0x01 ShellCode</h1>\n<ul>\n<li>1996 年，Aleph One 在 Underground 发表了著名论文 Smashing the Stack for Fun and Profit，其中详细描述了 Linux 系统中栈的结构和如何利用基于栈的缓冲区溢出。在这篇具有划时代意义的论文中，Aleph One 演示了如何向进程中植入一段用于获得 shell 的代码，并在论文中称这段被植入进程的代码为 “shellcode”。</li>\n<li>后来人们干脆统一用 shellcode 这个专用术语来通称缓冲区溢出攻击中植入进程的代码。这段代码可以是出于恶作剧目的的弹出一个消息框，也可以是出于攻击目的的删改重要文件、窃取数据、上传木马病毒并运行，甚至是出于破坏目的的格式化硬盘等。请注意本章讨论的 shellcode 是这种广义上的植入进程的代码，而不是狭义上的仅仅用来获得 shell 的代码。shellcode 往往需要用汇编语言写，并转换成二进制机器码，其内容和长度经常还会受到很多苛刻限制，故开发和调试的难度很高。</li>\n</ul>\n<h1 id=\"0x02-exploit\"><a class=\"anchor\" href=\"#0x02-exploit\">#</a> 0x02 Exploit</h1>\n<ul>\n<li>植入代码之前需要做大量的调试工作，例如，弄清楚程序有几个输入点，这些输入将最终会当作哪个函数的第几个参数读入到内存的哪一个区域，哪一个输入会造成栈溢出，在复制到栈区的时候对这些数据有没有额外的限制等。调试之后还要计算函数返回地址距离缓冲区的偏移并淹没之，选择指令的地址，最终制作出一个有攻击效果的 “承载” 着 shellcode 的输入字符串。这个代码植入的过程就是漏洞利用，也就是 exploit。</li>\n<li>exploit 一般以一段代码的形式出现，用于生成攻击性的网络数据包或者其他形式的攻击性输入。expliot 的核心是淹没返回地址，劫持进程的控制权，之后跳转去执行 shellcode。与 shellcode 具有一定的通用性不同，exploit 往往是针对特定漏洞而言的。</li>\n</ul>\n<h1 id=\"0x03-shellcodeexploit\"><a class=\"anchor\" href=\"#0x03-shellcodeexploit\">#</a> 0x03 ShellCode&amp;Exploit</h1>\n<ul>\n<li>两者之间的关系\n<ul>\n<li>漏洞利用的过程就好像一枚导弹飞向目标的过程。导弹的设计者关注的是怎样计算飞行路线，锁定目标，最终把弹头精确地运载到目的地并引爆，而并不关心所承载的弹头到底是用来在地上砸一个坑的铅球，还是用来毁灭一个国家的核弹头；这就如同 exploit 关心的是怎样淹没返回地址，获得进程控制权，把 EIP 传递给 shellcode 让其得到执行并发挥作用，而不关心 shellcode 到底是弹出一个消息框的恶作剧，还是用于格式化对方硬盘的穷凶极恶的代码。</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"0x04-工具介绍-metasploit\"><a class=\"anchor\" href=\"#0x04-工具介绍-metasploit\">#</a> 0x04 工具介绍 - MetaSploit</h1>\n<ul>\n<li>设计思想：随着现代化软件开发技术的发展，模块化、封装、代码重用等思想在漏洞利用技术中也得以体现。试想如果仿照武器的设计思想，分开设计导弹和弹头，将各自的技术细节封装起来，使用标准化的接口，漏洞利用的过程将更容易实现。</li>\n<li>Metasploit 通过规范化 exploit 和 shellcode 之间的接口把漏洞利用的过程封装成易用的模块，大大减少了 expliot 开发过程中的重复工作，深刻体现了代码重用和模块化、结构化的思想。在这个平台中：\n<ol>\n<li>所有的 exploit 都使用漏洞名称来命名，里边包含有这个漏洞的函数返回地址，所使用的跳转指令地址等关键信息。</li>\n<li>将常用的 shellcode（例如，用于绑定端口反向连接、执行任意命令等）封装成一个个通用的模块，可以轻易地与任意漏洞的 exploit 进行组合。</li>\n</ol>\n</li>\n</ul>\n",
            "tags": [
                "二进制",
                "0day安全"
            ]
        },
        {
            "id": "https://z-sy.github.io/2021/01/21/penetration-test-2021-01-21-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/",
            "url": "https://z-sy.github.io/2021/01/21/penetration-test-2021-01-21-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/",
            "title": "主动信息收集",
            "date_published": "2021-01-21T15:50:20.000Z",
            "content_html": "<h1 id=\"0x00-开篇\"><a class=\"anchor\" href=\"#0x00-开篇\">#</a> 0x00 开篇</h1>\n<ul>\n<li><span class=\"kbd\">勉励语 - 学如不及，犹恐失之</span></li>\n</ul>\n<h1 id=\"0x01-介绍\"><a class=\"anchor\" href=\"#0x01-介绍\">#</a> 0x01 介绍</h1>\n<ul>\n<li>直接与目标系统交互，无法避免留下访问的痕迹</li>\n<li>一般多使用受控的电脑进行探测，如使用代理或者已被控制的主机。要做好被封杀的准备，同时过程中要记得迷惑对方，隐藏真实流量。</li>\n<li>发送不同的探测，判断目标状态</li>\n</ul>\n<h1 id=\"0x02-发现阶段\"><a class=\"anchor\" href=\"#0x02-发现阶段\">#</a> 0x02 发现阶段</h1>\n<ul>\n<li>作用：识别活着的主机</li>\n<li>对于协议层的二层发现来讲，扫描速度快、可靠但是缺点就是不可路由。</li>\n<li>ARP 协议\n<ul>\n<li>arping</li>\n<li>nmap</li>\n<li>Netdiscover</li>\n<li>等等</li>\n</ul>\n</li>\n<li>练习时候建议结合 WiresShark 软件，抓网卡包，结合协议定义理解</li>\n</ul>\n",
            "tags": [
                "渗透测试",
                "主动信息收集"
            ]
        },
        {
            "id": "https://z-sy.github.io/2021/01/17/binary-2021-01-17-0day%E5%AE%89%E5%85%A8%E6%B8%A9%E4%B9%A0-05/",
            "url": "https://z-sy.github.io/2021/01/17/binary-2021-01-17-0day%E5%AE%89%E5%85%A8%E6%B8%A9%E4%B9%A0-05/",
            "title": "0day安全温习-05",
            "date_published": "2021-01-17T14:50:25.000Z",
            "content_html": "<h1 id=\"0x00-开篇\"><a class=\"anchor\" href=\"#0x00-开篇\">#</a> 0x00 开篇</h1>\n<ul>\n<li><span class=\"kbd\">勉励语 - 盛年不重来，一日难再晨</span></li>\n</ul>\n<h1 id=\"0x01-代码植入原理\"><a class=\"anchor\" href=\"#0x01-代码植入原理\">#</a> 0x01 代码植入原理</h1>\n<ul>\n<li>淹没函数返回地址，同时，将返回地址指向我们自己部署的代码中</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;windows.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">PASSWORD </span><span class=\"token string\">\"1234567\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">verify_password</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>password<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> authenticated<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">char</span> buffer<span class=\"token punctuation\">[</span><span class=\"token number\">44</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    authenticated<span class=\"token operator\">=</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">,</span>PASSWORD<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">,</span>password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//over flowed here!</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">return</span> authenticated<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">int</span> valid_flag<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">char</span> password<span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    FILE <span class=\"token operator\">*</span> fp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token function\">LoadLibrary</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user32.dll\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//prepare for messagebox </span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>fp<span class=\"token operator\">=</span><span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"password.txt\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"rw+\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token function\">fscanf</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">,</span><span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span>password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    valid_flag <span class=\"token operator\">=</span> <span class=\"token function\">verify_password</span><span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>valid_flag<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"incorrect password!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Congratulation! You have passed the verification!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token function\">fclose</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"0x02-调用测试函数messageboxa\"><a class=\"anchor\" href=\"#0x02-调用测试函数messageboxa\">#</a> 0x02 调用测试函数 MessageBoxA</h1>\n<ul>\n<li>用汇编语言调用 MessageboxA 需要 3 个步骤。</li>\n<li>（1）装载动态链接库 user32.dll。MessageBoxA 是动态链接库 user32.dll 的导出函数。虽然大多数有图形化操作界面</li>\n<li>程序都已经装载了这个库，但是我们用来实验的 consol 版并没有默认加载它。</li>\n<li>（2）在汇编语言中调用这个函数需要获得这个函数的入口地址。</li>\n<li>（3）在调用前需要向栈中按从右向左的顺序压入 MessageBoxA 的 4 个参数。</li>\n<li>为了让植入的机器代码更加简洁明了，我们在实验准备中构造漏洞程序的时候已经人工加载了 user32.dll 这个库，所以第一步操作不用在汇编语言中考虑。</li>\n<li>MessageBoxA 的入口参数可以通过 user32.dll 在系统中加载的基址和 MessageBoxA 在库中的偏移相加得到。具体的我们可以使用 VC6.0 自带的小工具 “Dependency Walker” 获得这些信息。</li>\n</ul>\n<h1 id=\"0x03-部署代码淹没函数返回地址\"><a class=\"anchor\" href=\"#0x03-部署代码淹没函数返回地址\">#</a> 0x03 部署代码，淹没函数返回地址</h1>\n<ul>\n<li>将相应十六进制代码录入到文件中，并在溢出至返回地址位置开始调整返回地址</li>\n</ul>\n",
            "tags": [
                "二进制",
                "0day安全"
            ]
        },
        {
            "id": "https://z-sy.github.io/2021/01/12/algorithm-2021-01-12-%E6%89%BE%E5%87%BA%E6%89%80%E6%9C%89%E5%8F%98%E4%BD%8D%E8%AF%8D%E5%88%86%E7%B1%BB/",
            "url": "https://z-sy.github.io/2021/01/12/algorithm-2021-01-12-%E6%89%BE%E5%87%BA%E6%89%80%E6%9C%89%E5%8F%98%E4%BD%8D%E8%AF%8D%E5%88%86%E7%B1%BB/",
            "title": "找出所有变位词分类",
            "date_published": "2021-01-12T12:36:34.000Z",
            "content_html": "<h1 id=\"0x00-开篇\"><a class=\"anchor\" href=\"#0x00-开篇\">#</a> 0x00 开篇</h1>\n<ul>\n<li><span class=\"kbd\">勉励语 - 百尺竿头，更进一步</span></li>\n</ul>\n<h1 id=\"0x01-问题-找出所有的变位词分类\"><a class=\"anchor\" href=\"#0x01-问题-找出所有的变位词分类\">#</a> 0x01 问题 - 找出所有的变位词分类</h1>\n<ul>\n<li>输入 - 带有 n 个元素的单词字典</li>\n<li>输出 - 有多少个同类的变位词并列出元素</li>\n<li>约束 - 以最小代价进行</li>\n</ul>\n<h1 id=\"0x02-问题分析\"><a class=\"anchor\" href=\"#0x02-问题分析\">#</a> 0x02 问题分析</h1>\n<ul>\n<li>任何一种考虑单词的所有字母的排列的方法都注定了要失败，在经历了排列组合计算再加上对比属于哪一分类的计算所花的时间开销是惊人的。所以考虑标识法即标识字典中的每一个词，是的在具有相同变位词类中的单词具有相同的标识。然后，将所有具有相同标识的词集中在一起。由此，变位词问题分解为两个子问题 ---①选择标识②集中具有相同标识的单词。</li>\n</ul>\n<h1 id=\"0x03-应用算法\"><a class=\"anchor\" href=\"#0x03-应用算法\">#</a> 0x03 应用算法</h1>\n<ol>\n<li>选择标识 - 可以简单的采用将单词中的字母按照字母表中的顺寻排序，例如 &quot;deposit&quot; 的标识就是 &quot;deiopst&quot;，这也是其他任何在该类中的标识。</li>\n<li>集中所有具有相同标识的单词 - Tom Cargill 的翻手表示：先用一种方式排序（水平翻手），再用另一种方式排序（垂直翻手）</li>\n<li>变位词程序的实现划分为三个子模块：sign、sort 和 squash。输入经过 sign 得到排列好的标识；sign 后的输出作为 sort 后的输入，将所有具有相同标识的单词归拢到一起；经过 sort 后的输出作为 squash 的输入进行格式化，具有同一标识的输出到同一行，不同标识的给换行到下一行。</li>\n</ol>\n<div class=\"note info\">\n<p>sign 模块 - while 循环每次读取一个字符串到 word 中，直至文件末尾为止。strcpy 函数赋值输入单词到 sig 中，然后调用 C 标准库函数 qsort 对单词 sig 中的字母进行排序（参数介绍 - 待排序的数组、数组的长度、每个待排序项的字节数以及比较两个项的函数名。本例中，待比较项为单词中的字母）。最后 printf 语句依次打印标识、单词本身和换行符</p>\n</div>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//sign 模块</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">charcomp</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>x<span class=\"token punctuation\">,</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">return</span> <span class=\"token operator\">*</span>x<span class=\"token operator\">-</span><span class=\"token operator\">*</span>y<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">WORDMAX <span class=\"token number\">100</span></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">char</span> word<span class=\"token punctuation\">[</span>WORDMAX<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>sig<span class=\"token punctuation\">[</span>WORDMAX<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span>word<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token constant\">EOF</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>sig<span class=\"token punctuation\">,</span>word<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token function\">qsort</span><span class=\"token punctuation\">(</span>sig<span class=\"token punctuation\">,</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>sig<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>charcomp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s %s\\n\"</span><span class=\"token punctuation\">,</span>sig<span class=\"token punctuation\">,</span>word<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><div class=\"note info\">\n<p>sort 模块 - 归拢收纳具有同一标识的单词，采用系统默认排序即可</p>\n</div>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//sort 模块</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 略</span></pre></td></tr></table></figure><div class=\"note info\">\n<p>squash 模块 - 将归拢收纳具有同一标识的单词，在同一行中打印出来，不同标识的换行处理。大部分工作使用第二个 printf 完成。对于每一个输入行，该语句输出第二个字段，后面跟一个空格，if 语句捕捉标识之间的差异。如果 sig 与 oldsig 不同，那么就打印换行符（有判断条件可知，第一个字符除外）。最后一个 printf 输出最后一个换行符。</p>\n</div>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//squash 模块</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">WORDMAX <span class=\"token number\">100</span></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">char</span> word<span class=\"token punctuation\">[</span>WORDMAX<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>sig<span class=\"token punctuation\">[</span>WORDMAX<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>oldsig<span class=\"token punctuation\">[</span>WORDMAX<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">int</span> linenum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>oldsig<span class=\"token punctuation\">,</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s %s\"</span><span class=\"token punctuation\">,</span>sig<span class=\"token punctuation\">,</span>word<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token constant\">EOF</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>oldsig<span class=\"token punctuation\">,</span>sig<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> linenum <span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>oldsig<span class=\"token punctuation\">,</span>sig<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        linenum<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s \"</span><span class=\"token punctuation\">,</span>word<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>bash 中执行程序测试。假设 dictionary 为存储单词的字典，数量为 230000，将其重定向至 sign 的输入，通过管道连接 sign 的输出至 sort，同理连接 sort 的输出至 squash，并将 squash 的输出写入到文件 gramlist。程序完成。运行时间 18 秒：sign 用时 4 秒，sort 用时 11 秒而 squash 用时 3 秒。</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@bash<span class=\"token comment\">#]sign &lt; dictionary | sort | squash > gramlist</span></pre></td></tr></table></figure>",
            "tags": [
                "算法",
                "编程珠玑"
            ]
        },
        {
            "id": "https://z-sy.github.io/2021/01/11/binary-2021-01-11-0day%E5%AE%89%E5%85%A8%E6%B8%A9%E4%B9%A0-04/",
            "url": "https://z-sy.github.io/2021/01/11/binary-2021-01-11-0day%E5%AE%89%E5%85%A8%E6%B8%A9%E4%B9%A0-04/",
            "title": "0day安全温习-04",
            "date_published": "2021-01-11T15:04:51.000Z",
            "content_html": "<h1 id=\"0x00-开篇\"><a class=\"anchor\" href=\"#0x00-开篇\">#</a> 0x00 开篇</h1>\n<ul>\n<li><span class=\"kbd\">勉励语 - 知不足者好学，耻下问者自满</span></li>\n</ul>\n<h1 id=\"0x01-修改邻接变量\"><a class=\"anchor\" href=\"#0x01-修改邻接变量\">#</a> 0x01 修改邻接变量</h1>\n<ul>\n<li>当了解函数调用的细节和栈中数据的分布情况，那么对结构进行一些特殊构造和破坏是可能的函数的局部变量在栈中一个挨着一个排列。如果这些局部变量中有数组之类的缓冲区，并且程序中存在数组越界的缺陷，那么越界的数组元素就有可能破坏栈中相邻变量的值，甚至破坏栈帧中所保存的 EBP 值、返回地址等重要数据。</li>\n</ul>\n<h1 id=\"0x02-注意事项\"><a class=\"anchor\" href=\"#0x02-注意事项\">#</a> 0x02 注意事项</h1>\n<ul>\n<li>观察内存的时候应当注意 “内存数据” 与 “数值数据” 的区别。在我们的调试环境中，内存由低到高分布，您可以简单地把这种情形理解成 Win32 系统在内存中由低位向高位存储一个 4 字节的双字（DWORD），但在作为 “数值” 应用的时候，却是按照由高位字节向低位字节进行解释。这样一来，在我们的调试环境中，“内存数据” 中的 DWORD 和我们逻辑上使用的 “数值数据” 是按字节序逆序过的。</li>\n<li>例如，变量 authenticated 在内存中存储为 0x 01 00 00 00，这个 “内存数据” 的双字会被计算机由高位向低位按字节解释成 “数值数据” 0x 00 00 00 01。出于便于阅读的目的，OllyDbg 在栈区显示的时候已经将内存中双字的字节序反转了，也就是说，栈区栏显示的是 “数值数据”，而不是原始的 “内存数据”，所以，在栈内看数据时，从左向右对于左边地址的偏移依次为 3、 2、1、0。</li>\n</ul>\n",
            "tags": [
                "二进制",
                "0day安全"
            ]
        },
        {
            "id": "https://z-sy.github.io/2021/01/10/penetration-test-2021-01-10-Shodan/",
            "url": "https://z-sy.github.io/2021/01/10/penetration-test-2021-01-10-Shodan/",
            "title": "Shodan",
            "date_published": "2021-01-10T11:59:58.000Z",
            "content_html": "<h1 id=\"0x00-开篇\"><a class=\"anchor\" href=\"#0x00-开篇\">#</a> 0x00 开篇</h1>\n<ul>\n<li><span class=\"kbd\">勉励语 - 不登高山，不知天之高也；不临深溪，不知地之厚也</span></li>\n</ul>\n<h1 id=\"0x01-介绍\"><a class=\"anchor\" href=\"#0x01-介绍\">#</a> 0x01 介绍</h1>\n<ul>\n<li>Shodan 是一个搜索引擎，但它与 Google 这种搜索网址的搜索引擎不同，Shodan 是用来搜索网络空间中在线设备的，你可以通过 Shodan 搜索指定的设备，或者搜索特定类型的设备。</li>\n</ul>\n<h1 id=\"0x02-过滤器\"><a class=\"anchor\" href=\"#0x02-过滤器\">#</a> 0x02 过滤器</h1>\n<div class=\"note info\">\n<p>简要列出，具体可查看 Shodan 官方文档</p>\n</div>\n<ul>\n<li>hostname：搜索指定的主机或域名，例如 hostname:&quot;google&quot;</li>\n<li>port：搜索指定的端口或服务，例如 port:&quot;21&quot;</li>\n<li>country：搜索指定的国家，例如 country:&quot;CN&quot;</li>\n<li>city：搜索指定的城市，例如 city:&quot;Hefei&quot;</li>\n<li>org：搜索指定的组织或公司，例如 org:&quot;google&quot;</li>\n<li>isp：搜索指定的 ISP 供应商，例如 isp:&quot;China Telecom&quot;</li>\n<li>product：搜索指定的操作系统 / 软件 / 平台，例如 product:&quot;Apache httpd&quot;</li>\n<li>version：搜索指定的软件版本，例如 version:&quot;1.6.2&quot;</li>\n<li>geo：搜索指定的地理位置，参数为经纬度，例如 geo:&quot;31.8639, 117.2808&quot;</li>\n<li>before/after：搜索指定收录时间前后的数据，格式为 dd-mm-yy，例如 before:&quot;11-11-15&quot;</li>\n<li>net：搜索指定的 IP 地址或子网，例如 net:&quot;210.45.240.0/24&quot;</li>\n<li>等等</li>\n</ul>\n<h1 id=\"0x03-官网\"><a class=\"anchor\" href=\"#0x03-官网\">#</a> 0x03 官网</h1>\n<div class=\"note info\">\n<p>善于运用搜索引擎，收集开放信息</p>\n</div>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuc2hvZGFuLmlv\">Shodan 官网链接</span></li>\n</ul>\n",
            "tags": [
                "渗透测试",
                "被动信息收集"
            ]
        },
        {
            "id": "https://z-sy.github.io/2021/01/07/penetration-test-2021-01-07-WireShark/",
            "url": "https://z-sy.github.io/2021/01/07/penetration-test-2021-01-07-WireShark/",
            "title": "WireShark",
            "date_published": "2021-01-07T15:01:51.000Z",
            "content_html": "<h1 id=\"0x00-开篇\"><a class=\"anchor\" href=\"#0x00-开篇\">#</a> 0x00 开篇</h1>\n<ul>\n<li><span class=\"kbd\">勉励语 - 志当存高远</span></li>\n</ul>\n<h1 id=\"0x01-介绍\"><a class=\"anchor\" href=\"#0x01-介绍\">#</a> 0x01 介绍</h1>\n<pre><code>* wireshark是非常流行的网络封包分析软件，功能十分强大。可以截取各种网络封包，显示网络封包的详细信息，开源软件。\n</code></pre>\n<div class=\"note info\">\n<p>为了安全考虑，wireshark 只能查看封包，而不能修改封包的内容，或者发送封包</p>\n</div>\n<h1 id=\"0x02-使用场景\"><a class=\"anchor\" href=\"#0x02-使用场景\">#</a> 0x02 使用场景</h1>\n<div class=\"note info\">\n<p>包括但不限于</p>\n</div>\n<pre><code>1. 网络管理员会使用wireshark来检查网络问题\n2. 软件测试工程师使用wireshark抓包，来分析自己测试的软件\n3. 从事socket编程的工程师会用wireshark来调试\n4. ...\n</code></pre>\n<h1 id=\"0x03-主要界面\"><a class=\"anchor\" href=\"#0x03-主要界面\">#</a> 0x03 主要界面</h1>\n<pre><code>1. Display Filter(显示过滤器)，  用于过滤\n2. Packet List Pane(封包列表)，显示捕获到的封包，有源地址和目标地址，端口号。颜色不同，代表\n3. Packet Details Pane(封包详细信息), 显示封包中的字段\n4. Dissector Pane(16进制数据)\n5. Miscellanous(地址栏，杂项)\n</code></pre>\n<h1 id=\"0x04-链接地址\"><a class=\"anchor\" href=\"#0x04-链接地址\">#</a> 0x04 链接地址</h1>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cud2lyZXNoYXJrLm9yZw==\">官网链接</span></li>\n</ul>\n",
            "tags": [
                "渗透测试",
                "WireShark"
            ]
        },
        {
            "id": "https://z-sy.github.io/2021/01/05/penetration-test-2021-01-05-nc%E5%91%BD%E4%BB%A4/",
            "url": "https://z-sy.github.io/2021/01/05/penetration-test-2021-01-05-nc%E5%91%BD%E4%BB%A4/",
            "title": "nc命令",
            "date_published": "2021-01-05T15:13:01.000Z",
            "content_html": "<h1 id=\"0x00-开篇\"><a class=\"anchor\" href=\"#0x00-开篇\">#</a> 0x00 开篇</h1>\n<ul>\n<li><span class=\"kbd\">勉励语 - 积土而为山，积水而为海</span></li>\n</ul>\n<h1 id=\"0x01-介绍\"><a class=\"anchor\" href=\"#0x01-介绍\">#</a> 0x01 介绍</h1>\n<pre><code>* nc作用\n    * 实现任意TCP/UDP端口的侦听，nc可以作为server以TCP或UDP方式侦听指定端口\n    * 端口的扫描，nc可以作为client发起TCP或UDP连接\n    * 机器之间传输文件\n    * 机器之间网络测速\n</code></pre>\n<h1 id=\"0x02-常用参数\"><a class=\"anchor\" href=\"#0x02-常用参数\">#</a> 0x02 常用参数</h1>\n<pre><code>* -l    用于指定nc将处于侦听模式。指定该参数，则意味着nc被当作server，侦听并接受连接，而非向其它地址发起连接。\n* -p    暂未用到（老版本的nc可能需要在端口号前加-p参数，下面测试环境是centos6.6，nc版本是nc-1.84，未用到-p参数）\n* -s    指定发送数据的源IP地址，适用于多网卡机\n* -u    指定nc使用UDP协议，默认为TCP\n* -v    输出交互或出错信息，新手调试时尤为有用\n* -w    超时秒数，后面跟数字\n</code></pre>\n<h1 id=\"0x03-使用示例\"><a class=\"anchor\" href=\"#0x03-使用示例\">#</a> 0x03 使用示例</h1>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#传输信息</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span>root@bash<span class=\"token comment\">#] nc -l -p 4444 #启动 tcp 端口 4444 并监听</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">[</span>root@bash<span class=\"token comment\">#] nc -nv 1.1.1.1 4444 #连接服务器主机的 4444 端口</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#传输文件</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">[</span>root@bash<span class=\"token comment\">#] nc -l -p 4444 > 1.mp4 #启动 tcp 端口 4444 并监听，收到的数据重定向到 1.mp4 文件</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">[</span>root@bash<span class=\"token comment\">#] nc -nv 1.1.1.1 4444 &lt; 1.mp4 -q 1 #连接服务器主机的 4444 端口，并传输 1.mp4 文件，-q 1 参数为传输完延迟 1 秒退出</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">#流媒体服务</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">[</span>root@bash<span class=\"token comment\">#] cat 1.mp4 | nc -lp 333 #打开 1.mp4 文件并将数据流通过管道传输给 333 端口</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">[</span>root@bash<span class=\"token comment\">#] nc -nv 1.1.1.1 333 | mpplayer -vo x11 -cache 3000 #连接 333 端口并接收数据传输到 mpplayer 播放器</span></pre></td></tr></table></figure>",
            "tags": [
                "渗透测试",
                "nc命令"
            ]
        },
        {
            "id": "https://z-sy.github.io/2021/01/04/algorithm-2021-01-04-%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%E7%9A%84%E5%A8%81%E5%8A%9B/",
            "url": "https://z-sy.github.io/2021/01/04/algorithm-2021-01-04-%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%E7%9A%84%E5%A8%81%E5%8A%9B/",
            "title": "基本操作的威力",
            "date_published": "2021-01-04T12:29:38.000Z",
            "content_html": "<h1 id=\"0x00-开篇\"><a class=\"anchor\" href=\"#0x00-开篇\">#</a> 0x00 开篇</h1>\n<ul>\n<li><span class=\"kbd\">勉励语 - 去留无意，闲看庭前花开花落；宠辱不惊，漫随天外云卷云舒</span></li>\n</ul>\n<h1 id=\"0x01-问题-一次友好的对话\"><a class=\"anchor\" href=\"#0x01-问题-一次友好的对话\">#</a> 0x01 问题 - 一次友好的对话</h1>\n<ul>\n<li>输入 - n 元一维向量</li>\n<li>输出 - 向左旋转 i 个位置的 n 元一维向量</li>\n<li>约束 - 仅使用几十个额外字节的内存空间，在正比于 n 的时间内完成向量的旋转</li>\n</ul>\n<h1 id=\"0x02-问题分析\"><a class=\"anchor\" href=\"#0x02-问题分析\">#</a> 0x02 问题分析</h1>\n<ul>\n<li>假设 n=8，i=3，向量 abcdefgh 旋转为向量 defghabc。简单的代码使用一个 n 元的中间向量在 n 步内可完成该工作。</li>\n</ul>\n<h1 id=\"0x03-应用算法\"><a class=\"anchor\" href=\"#0x03-应用算法\">#</a> 0x03 应用算法</h1>\n<ol>\n<li>将向量 x 中的前 i 个元素复制到一个临时数组中，接着将余下的 n-i 个元素左移 i 个位置，然后再将前 i 个元素从临时数组中复制到 x 中余下的位置。</li>\n</ol>\n<div class=\"note info\">\n<p>这种方法使用了 i 个额外的位置，如果 i 很大则产生了过大的存储空间的消耗</p>\n</div>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    string s <span class=\"token operator\">=</span> <span class=\"token string\">\"abcdefghijklmn\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    cout<span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"The origin is: \"</span><span class=\"token operator\">&lt;&lt;</span>s<span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 左移个数</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    cin<span class=\"token operator\">>></span>i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">></span>s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        i <span class=\"token operator\">=</span> i<span class=\"token operator\">%</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 将前 i 个元素临时保存</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    string <span class=\"token function\">tmp</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">// 将剩余的左移 i 个位置</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        s<span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    s <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> tmp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    cout<span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"The result is: \"</span><span class=\"token operator\">&lt;&lt;</span>s<span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>定义一个函数将 x 向左旋转一个位置（其时间正比于 n），然后调用该函数 i 次。</li>\n</ol>\n<div class=\"note info\">\n<p>这种方法虽然空间复杂度为 O (1)，但产生了过多的运行时间消耗</p>\n</div>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">rotateOnce</span><span class=\"token punctuation\">(</span>string <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">char</span> tmp <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        s<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    s<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre> </pre></td></tr><tr><td data-num=\"16\"></td><td><pre> </pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    string s <span class=\"token operator\">=</span> <span class=\"token string\">\"abcdefghijklmn\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"The origin is: \"</span> <span class=\"token operator\">&lt;&lt;</span> s <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">// 左移个数</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    cin <span class=\"token operator\">>></span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">></span> s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        i <span class=\"token operator\">=</span> i<span class=\"token operator\">%</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token comment\">// 调用函数 i 次</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token function\">rotateOnce</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"The result is: \"</span><span class=\"token operator\">&lt;&lt;</span> s <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>移动 x [0] 到临时变量 t 中，然后移动 x [i] 到 x [0] 中，x [2i] 到 x [i]，依次类推，直到我们又回到 x [0] 的位置提取元素，此时改为从临时变量 t 中提取元素，然后结束该过程（当下标大于 n 时对 n 取模或者减去 n）。如果该过程没有移动全部的元素，就从 x [1] 开始再次进行移动，总共移动 i 和 n 的最大公约数次。</li>\n</ol>\n<div class=\"note info\">\n<p>这种方法非常精巧，像书中所说的一样堪称巧妙的杂技表演。空间复杂度为 O (1)，时间复杂度为线性时间，满足问题的性能要求，但还不是最佳</p>\n</div>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 欧几里德（辗转相除）算法求最大公约数</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">gcd</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> j<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">></span> j<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            i <span class=\"token operator\">=</span> i<span class=\"token operator\">%</span>j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token keyword\">return</span> j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>j <span class=\"token operator\">></span> i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            j <span class=\"token operator\">=</span> j<span class=\"token operator\">%</span>i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>j <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre> </pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    string s <span class=\"token operator\">=</span> <span class=\"token string\">\"abcdefghijklmn\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"The origin is: \"</span><span class=\"token operator\">&lt;&lt;</span> s <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token comment\">// 左移个数</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    cin <span class=\"token operator\">>></span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">></span> s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        i <span class=\"token operator\">=</span> i<span class=\"token operator\">%</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token comment\">// 移动</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">char</span> tmp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token keyword\">int</span> times <span class=\"token operator\">=</span> <span class=\"token function\">gcd</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">&lt;</span>times<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        tmp <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token keyword\">int</span> pre <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 记录上一次的位置</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token keyword\">int</span> t <span class=\"token operator\">=</span> pre<span class=\"token operator\">+</span>i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">>=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                t <span class=\"token operator\">=</span> t<span class=\"token operator\">-</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">==</span> j<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 直到 tmp 原来的位置 j 为止</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            s<span class=\"token punctuation\">[</span>pre<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            pre <span class=\"token operator\">=</span> t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        s<span class=\"token punctuation\">[</span>pre<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"The result is: \"</span><span class=\"token operator\">&lt;&lt;</span> s <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>旋转向量 x 实际上就是交换向量 ab 的两段，得到向量 ba，这里 a 代表 x 的前 i 个元素。假设 a 比 b 短。将 b 分割成 bl 和 br，使 br 的长度和 a 的长度一样。交换 a 和 br，将 ablbr 转换成 brbla。因为序列 a 已在它的最终位置了，所以我们可以集中精力交换 b 的两个部分了。由于这个新问题和原先的问题是一样的，所以我们以递归的方式进行解决。</li>\n</ol>\n<div class=\"note info\">\n<p>这种方法可以得到优雅的程序，但是需要巧妙的代码，并且要进行一些思考才能看出它的效率足够高</p>\n</div>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 略</span></pre></td></tr></table></figure><ol start=\"5\">\n<li>（最佳）将这个问题看做是把数组 ab 转换成 ba，同时假定我们拥有一个函数可以将数组中特定部分的元素逆序。从 ab 开始，首先对 a 求逆，得到 arb，然后对 b 求逆，得到 arbr。最后整体求逆，得到（arbr）r，也就是 ba。</li>\n</ol>\n<div class=\"note info\">\n<p>求逆序的方法在时间和空间上都很高效，而且代码非常简短，很难出错</p>\n</div>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span>string <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> begin<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> end<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>begin <span class=\"token operator\">&lt;</span> end<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">char</span> tmp <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>begin<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        s<span class=\"token punctuation\">[</span>begin<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        s<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token operator\">++</span>begin<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token operator\">--</span>end<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre> </pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    string s <span class=\"token operator\">=</span> <span class=\"token string\">\"abcdefghijklmn\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"The origin is: \"</span><span class=\"token operator\">&lt;&lt;</span> s <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>     </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    cin <span class=\"token operator\">>></span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">></span> s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        i <span class=\"token operator\">=</span> i<span class=\"token operator\">%</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre> </pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre> </pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"The result is: \"</span><span class=\"token operator\">&lt;&lt;</span> s <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"0x04-补充链接\"><a class=\"anchor\" href=\"#0x04-补充链接\">#</a> 0x04 补充链接</h1>\n<ul>\n<li>本文主要摘选自<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vc29uZ2xlZS9wLzU3MzgxNDYuaHRtbA==\">神奕</span></li>\n</ul>\n",
            "tags": [
                "算法",
                "编程珠玑"
            ]
        },
        {
            "id": "https://z-sy.github.io/2021/01/03/penetration-test-2021-01-03-BurpSuite/",
            "url": "https://z-sy.github.io/2021/01/03/penetration-test-2021-01-03-BurpSuite/",
            "title": "BurpSuite",
            "date_published": "2021-01-03T09:36:26.000Z",
            "content_html": "<h1 id=\"0x00-开篇\"><a class=\"anchor\" href=\"#0x00-开篇\">#</a> 0x00 开篇</h1>\n<ul>\n<li><span class=\"kbd\">勉励语 - 书山有路勤为径，学海无涯苦作舟</span></li>\n</ul>\n<h1 id=\"0x01-介绍\"><a class=\"anchor\" href=\"#0x01-介绍\">#</a> 0x01 介绍</h1>\n<p>BurpSuite 是进行 Web 应用安全测试集成平台。它将各种安全工具无缝地融合在一起，以支持整个测试过程中，从最初的映射和应用程序的攻击面分析，到发现和利用安全漏洞。其模块几乎包含整个安全测试过程，从最初对目标程序的信息采集，到漏洞扫描及其利用，多模块间高融合的配合，使得安全测试的过程更加高效。</p>\n<h1 id=\"0x02-主要模块\"><a class=\"anchor\" href=\"#0x02-主要模块\">#</a> 0x02 主要模块</h1>\n<ol>\n<li>Dashboard</li>\n<li>Proxy</li>\n<li>Intruder</li>\n<li>Repeater</li>\n<li>Decoder</li>\n</ol>\n<h1 id=\"0x03-模块简介\"><a class=\"anchor\" href=\"#0x03-模块简介\">#</a> 0x03 模块简介</h1>\n<ol>\n<li><span class=\"kbd\">Proxy</span> - 代理模块作为 BurpSuite 的核心功能，拦截 HTTP/S 的代理服务器，作为一个在浏览器和目标应用程序之间的中间人，允许拦截，查看，修改在两个方向上的原始数据流。\n<ul>\n<li><span class=\"kbd\">intercept 选项</span> - 用于显示修改 HTTP 请求及响应内容，并可以将拦截的 HTTP 请求快速发送至其他模块处理。\n<ul>\n<li><span class=\"kbd\">Forward</span> - 用于发送数据。当把所需要的 HTTP 请求编辑编辑完成后，手动发送数据。</li>\n<li><span class=\"kbd\">Drop</span> - 将该请求包丢弃。</li>\n<li><span class=\"kbd\">Intercept is off/on</span> - 拦截开关。当处于 off 状态下时，BurpSuite 会自动转发所拦截的所有请求；当处于 on 状态下时，BurpSuite 会将所有拦截所有符合规则的请求并将它显示出来等待编辑或其他操作。</li>\n<li><span class=\"kbd\">Action</span> - 功能菜单，与右键菜单内容相同，在这可以将请求包发送到其他的模块或者对数据包进行其他的操作。</li>\n</ul>\n</li>\n<li><span class=\"kbd\">http history 选项</span> - 这里将记录经过代理服务器访问的所有请求，即使当 Intercept is off 时也会记录。记录包括：#(请求索引号)、Host (主机)、Method (请求方式)、URL (请求地址)、Params (参数)、Edited (编辑)、Status (状态)、Length (响应字节长度)、MIME type (响应的 MLME 类型)、Extension (地址文件扩展名)、Title (页面标题)、Comment (注释)、SSL、IP (目标 IP 地址)、Cookies、Time (发出请求时间)、Listener port (监听端口)。</li>\n<li><span class=\"kbd\">WebSockets history 选项</span> - 用于记录 WebSockets 的数据包，是 HTML5 中最强大的通信功能，定义了一个全双工的通信信道，只需 Web 上的一个 Socket 即可进行通信，能减少不必要的网络流量并降低网络延迟。</li>\n<li><span class=\"kbd\">Options 选项</span> - 主要用于设置代理监听、请求和响应，拦截反应，匹配和替换，ssl 等。</li>\n</ul>\n</li>\n</ol>\n<div class=\"note info\">\n<p>在 BurpSuite 任何请求处，右键菜单选择 “Send to intruder” 选项，将自动发送到此模块下并自动相关内容。</p>\n</div>\n<ol start=\"2\">\n<li><span class=\"kbd\">Intruder</span> - 用于自动对 Web 应用程序自定义的攻击。它可以用来自动执行您的测试过程中可能出现的所有类型的任务。例如目录爆破，注入，密码爆破等。\n<ul>\n<li><span class=\"kbd\">Target 选项</span> - 用于配置目标服务器进行攻击的详细信息。\n<ul>\n<li><span class=\"kbd\">Host</span> - 这是目标服务器的 IP 地址或主机名。</li>\n<li><span class=\"kbd\">Port</span> - 这是目标服务的端口号。</li>\n<li><span class=\"kbd\">Use HTTPS</span> - 这指定的 SSL 是否应该被使用.</li>\n</ul>\n</li>\n<li><span class=\"kbd\">Positions 选项</span> - 设置 Payloads 的插入点以及攻击类型（攻击模式）。</li>\n<li><span class=\"kbd\">Payloads 选项</span> - 设置 payload，配置字典。</li>\n<li><span class=\"kbd\">Opetions 选项</span> - 此选项卡包含了 request headers，request engine，attack results ，grep match，grep_extrack，grep payloads 和 redirections。可以发动攻击之前，在主要 Intruder 的 UI 上编辑这些选项，大部分设置也可以在攻击时对已在运行的窗口进行修改。</li>\n</ul>\n</li>\n<li><span class=\"kbd\">Repeater</span> - 用于手动操作和发送个别 HTTP 请求，并分析应用程序的响应一个简单的工具。可以发送一个内部请求从 Burp 任何地方到 Repeater，修改请求并且发送。</li>\n<li><span class=\"kbd\">Decoder</span> - 将原始数据转换成各种编码和哈希表的简单工具。它能够智能地识别多种编码格式采用启发式技术。</li>\n</ol>\n<h1 id=\"0x04-补充链接\"><a class=\"anchor\" href=\"#0x04-补充链接\">#</a> 0x04 补充链接</h1>\n<ul>\n<li>本文主要摘选自<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vanNqbGl5YW5nL3AvMTA4NTMzMDcuaHRtbA==\"> BurpSuite pro v2.0 使用入门教程</span></li>\n</ul>\n",
            "tags": [
                "渗透测试",
                "BurpSuite"
            ]
        },
        {
            "id": "https://z-sy.github.io/2021/01/03/penetration-test-2021-01-03-penetration-test-introduce/",
            "url": "https://z-sy.github.io/2021/01/03/penetration-test-2021-01-03-penetration-test-introduce/",
            "title": "模块介绍",
            "date_published": "2021-01-03T09:36:25.000Z",
            "content_html": "<h1 id=\"0x00-开篇\"><a class=\"anchor\" href=\"#0x00-开篇\">#</a> 0x00 开篇</h1>\n<p>本模块主要分享总结渗透测试的相关知识</p>\n",
            "tags": [
                "渗透测试"
            ]
        },
        {
            "id": "https://z-sy.github.io/2021/01/02/algorithm-2021-01-02-%E4%B8%80%E6%AC%A1%E5%8F%8B%E5%A5%BD%E7%9A%84%E5%AF%B9%E8%AF%9D/",
            "url": "https://z-sy.github.io/2021/01/02/algorithm-2021-01-02-%E4%B8%80%E6%AC%A1%E5%8F%8B%E5%A5%BD%E7%9A%84%E5%AF%B9%E8%AF%9D/",
            "title": "一次友好的对话",
            "date_published": "2021-01-02T00:40:30.000Z",
            "content_html": "<h1 id=\"0x00-开篇\"><a class=\"anchor\" href=\"#0x00-开篇\">#</a> 0x00 开篇</h1>\n<ul>\n<li><span class=\"kbd\">勉励语 - 非淡泊无以明志，非宁静无以致远</span></li>\n</ul>\n<h1 id=\"0x01-问题-一次友好的对话\"><a class=\"anchor\" href=\"#0x01-问题-一次友好的对话\">#</a> 0x01 问题 - 一次友好的对话</h1>\n<ul>\n<li>输入 - 一个最多包含 n 个正整数的文件，每个数都小于 n，其中 n=10^7。如果在输入文件中有任何整数重复出现就是致命错误。没有其他数据与该整数相关联。</li>\n<li>输出 - 按升序排列的输入整数的列表</li>\n<li>约束 - 最多大约有 1MB 的内存空间可用，有充足的磁盘存储空间可用。运行时间最多几分钟，运行时间 10S 就不需要进一步优化了。</li>\n</ul>\n<h1 id=\"0x02-问题分析\"><a class=\"anchor\" href=\"#0x02-问题分析\">#</a> 0x02 问题分析</h1>\n<ul>\n<li>常见方式一般的以基于磁盘的<span class=\"kbd\">归并排序</span>为起点，但需对其进行调整，由于是对整数进行排序，可将原来两百行的程序减少为十几行，且一般归并排序要用到中间文件，程序将运行的更快，但是完成程序可能仍然需要几天时间。</li>\n<li>另一种解决方案利用该问题的特殊性。如果每个号码都使用 7 字节来存储，那么在可用的 1MB 存储空间大约可存 143000 个号码。如果每个号码都使用 32 位整数来表示的话，在 1MB 的存储空间里就可以存储 250000 个号码。因此，可重复遍历输入文件 40 趟来完成排序。第一趟 - 0 至 249999；第二趟 - 250000 至 499999 依此类推。对于内存中的排序来讲<span class=\"kbd\">快速排序</span>相当高效，且该程序拥有所希望的特性 - 不必考虑使用中间磁盘文件，但为此付出的代价是读取输入文件 40 次。</li>\n<li>综上两方优点 - 我们想要的读输入文件一次，且不使用中间文件。最终，问题归结为能否能够用大约 800 万个可用位来表示最多 1000 万个互异的整数。</li>\n</ul>\n<h1 id=\"0x03-应用算法\"><a class=\"anchor\" href=\"#0x03-应用算法\">#</a> 0x03 应用算法</h1>\n<ul>\n<li>位图算法。BitMap 算法的核心思想是用 bit 数组来记录 0-1 两种状态，然后再将具体数据映射到这个比特数组的具体位置，这个比特位设置成 0 表示数据不存在，设置成 1 表示数据存在。</li>\n<li>BitMap 算在在大量数据查询、去重等应用场景中使用的比较多，这个算法具有比较高的空间利用率。</li>\n</ul>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* 伪代码 */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">/* phase 1: initialize set to empty */</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  bit<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/* phase 2: insert present elements into the set */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">for</span> each i in the input file</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  bit<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">/* phase 3: write sorted output */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">if</span> bit<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    write i on the output file</pre></td></tr></table></figure>",
            "tags": [
                "算法",
                "编程珠玑"
            ]
        },
        {
            "id": "https://z-sy.github.io/2020/12/30/binary-2020-12-30-0day%E5%AE%89%E5%85%A8%E6%B8%A9%E4%B9%A0-03/",
            "url": "https://z-sy.github.io/2020/12/30/binary-2020-12-30-0day%E5%AE%89%E5%85%A8%E6%B8%A9%E4%B9%A0-03/",
            "title": "0day安全温习-03",
            "date_published": "2020-12-30T15:32:35.000Z",
            "content_html": "<h1 id=\"0x00-开篇\"><a class=\"anchor\" href=\"#0x00-开篇\">#</a> 0x00 开篇</h1>\n<ul>\n<li><span class=\"kbd\">勉励语 - 立志言为本，修身行乃先</span></li>\n</ul>\n<h1 id=\"0x01-逆向常用工具\"><a class=\"anchor\" href=\"#0x01-逆向常用工具\">#</a> 0x01 逆向常用工具</h1>\n<div class=\"note info\">\n<p>包括但不限于</p>\n</div>\n<ul>\n<li>动态分析工具\n<ul>\n<li>OllyDbg</li>\n</ul>\n</li>\n<li>静态分析工具\n<ul>\n<li>IDA Pro</li>\n</ul>\n</li>\n<li>二进制编辑器\n<ul>\n<li>UltraEdit</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"0x02-栈溢出原理与实践\"><a class=\"anchor\" href=\"#0x02-栈溢出原理与实践\">#</a> 0x02 栈溢出原理与实践</h1>\n<ul>\n<li>何为<span class=\"kbd\">栈溢出</span>\n<ul>\n<li>简单来说，缓冲区溢出就是在大缓冲区中的数据向小缓冲区复制的过程中，由于没有注意小缓冲区的边界，“撑爆” 了较小的缓冲区，从而冲掉了和小缓冲区相邻内存区域的其它数据而引起的内存问题。</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"0x03-两个寄存器esp和ebp\"><a class=\"anchor\" href=\"#0x03-两个寄存器esp和ebp\">#</a> 0x03 两个寄存器 ESP 和 EBP</h1>\n<pre><code>* ESP-栈指针寄存器(extended stack po inter)，其内存放着一个指针，该指针永远指向系统栈最上面一个栈帧的栈顶。\n* EBP-基址指针寄存器(extended base pointer)，其内存放着一个指针，该指针永远指向系统栈最上面一个栈帧的底部。\n</code></pre>\n<h1 id=\"0x04-函数调用过程\"><a class=\"anchor\" href=\"#0x04-函数调用过程\">#</a> 0x04 函数调用过程</h1>\n<pre><code>* 在形成函数栈帧一般要经历如下几个步骤：push操作进行参数入栈---&gt;call调用进行下一条返回地址的入栈操作并跳入调用函数的代码区---&gt;进入函数代码区后，一个push ebp记录当前栈帧，一个mov ebp，esp设置新栈帧的底部，一个sud esp，xxx抬高新栈帧的顶部，留出局部变量的空间。至此一个新栈帧形成。同理，函数返回步骤如下：保存返回值，通常放在EAX寄存器中---&gt;弹出当前栈帧，恢复上一个栈帧。具体操作-首先根据堆栈平衡，给ESP加上栈帧的大小，降低栈顶，回收当前栈帧空间，其次将当前栈帧底部保存的前栈帧EBP数值弹入EBP寄存器，恢复出上一个栈帧的栈帧底部，将保存的call调用的下一条指令地址弹给EIP寄存器。完成了一个新栈帧的生命周期，创建和释放。\n</code></pre>\n<div class=\"note info\">\n<p>进行缓冲出溢出实验注意事项 - 函数的调用约定和相关指令。一般，参数入栈顺序从右至左 - C、Syscall、Stdcall，其中 C 的恢复栈平衡位置在母函数，剩下的两个都在子函数。参数入栈顺序从左至右 - Basic、Fortran、Pascal，其恢复栈平衡的位置都在子函数中进行。在进行淹没溢出操作时候要注意！</p>\n</div>\n",
            "tags": [
                "二进制",
                "0day安全"
            ]
        },
        {
            "id": "https://z-sy.github.io/2020/12/28/binary-2020-12-28-0day%E5%AE%89%E5%85%A8%E6%B8%A9%E4%B9%A0-02/",
            "url": "https://z-sy.github.io/2020/12/28/binary-2020-12-28-0day%E5%AE%89%E5%85%A8%E6%B8%A9%E4%B9%A0-02/",
            "title": "0day安全温习-02",
            "date_published": "2020-12-28T15:43:28.000Z",
            "content_html": "<h1 id=\"0x00-开篇\"><a class=\"anchor\" href=\"#0x00-开篇\">#</a> 0x00 开篇</h1>\n<ul>\n<li><span class=\"kbd\">勉励语 - 风之积也不厚，则其负大翼也无力</span></li>\n</ul>\n<h1 id=\"0x01-基础\"><a class=\"anchor\" href=\"#0x01-基础\">#</a> 0x01 基础</h1>\n<ol>\n<li>PE 文件格式\n<ul>\n<li>PE 全称 - Portable Executable，是 Win32 平台下可执行文件遵守的数据格式。常见的可执行文件（如 “<em>.exe” 文件和 “</em>.dll” 文件）都是典型的 PE 文件。</li>\n</ul>\n</li>\n<li>PE 文件格式的数据节（section）\n<ul>\n<li>.text - 由编译器产生，存放着二进制的机器代码，也是我们反汇编和调试的对象</li>\n<li>.data - 初始化的数据块，如宏定义、全局变量、静态变量等</li>\n<li>.idata - 可执行文件所使用的动态链接库等外来函数与文件的信息</li>\n<li>.rsrc - 存放程序的资源，如图标、菜单等</li>\n</ul>\n<div class=\"note info\">\n<p>正常编译出的标准 PE 文件，其节信息往往是大致相同的。但这些 section 的名字只是为了方便人的记忆与使用，使用 Microsoft Visual C++ 中的编译指示符 #pragma dat a_seg () 可以把代码中的任意部分编译到 PE 的任意节中，节名也可以自己定义。如果可执行文件经过了 “加壳” 处理，PE 的节信息就会变得非常 “古怪”。在 Crack 和反病毒分析中需要经常处理这类古怪的 PE 文件</p>\n</div>\n</li>\n<li>PE 与虚拟内存之间的映射\n<ul>\n<li>何为<span class=\"kbd\">文件偏移地址</span>\n<ul>\n<li>数据在 PE 文件中的地址叫文件偏移地址，个人认为叫做文件地址更加准确。这是文件在磁盘上存放时相对于文件开头的偏移。</li>\n</ul>\n</li>\n<li>何为<span class=\"kbd\">装载基址 - Image Base</span>\n<ul>\n<li>PE 装入内存时的基地址。默认情况下，EXE 文件在内存中的基地址是 0x00400000，DLL 文件是 0x10000000。这些位置可以通过修改编译选项更改。</li>\n</ul>\n</li>\n<li>何为<span class=\"kbd\">虚拟内存地址 - Virtual Address，VA）</span>\n<ul>\n<li>PE 文件中的指令被装入内存后的地址。</li>\n</ul>\n</li>\n<li>何为<span class=\"kbd\">相对虚拟地址（Relative Virtual Address，RVA）</span>\n<ul>\n<li>相对虚拟地址是内存地址相对于映射基址的偏移量。</li>\n</ul>\n</li>\n</ul>\n<div class=\"note info\">\n<p>VA= Image Base+ RVA</p>\n</div>\n</li>\n<li>节偏移\n<ul>\n<li>产生原因 - 文件数据的存放单位与内存数据存放单位不同，文件 - 0x200；内存 - 0x1000h，对于两者不足单位的数据都会用 0x00 进行填充补全</li>\n<li>换算公式\n<ul>\n<li>文件偏移地址 = 虚拟内存地址（VA）−装载基址（Image Base）−节偏移<br />\n = RVA - 节偏移</li>\n</ul>\n</li>\n</ul>\n<div class=\"note info\">\n<p>在进行转换时，还有判断要转换的地址位于那个节内，然后减去相应的节偏移</p>\n</div>\n<ul>\n<li>工具推荐 -<span class=\"kbd\">LordPE</span></li>\n</ul>\n</li>\n</ol>\n",
            "tags": [
                "二进制",
                "0day安全"
            ]
        }
    ]
}